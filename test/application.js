/** Generated by SimQ **/
/** modules **/

// Generated by CoffeeScript 1.6.3
(function() {
  var SUPPORTED, arrayIndexOf, cache, creating, modules, require, resolve, stats;

  if (!this.require) {
    SUPPORTED = ['js', 'json', 'ts', 'coffee', 'eco'];
    modules = {};
    stats = {};
    cache = {};
    creating = [];
    require = function(name, parent) {
      var fullName, m;
      if (parent == null) {
        parent = null;
      }
      fullName = resolve(name, parent);
      if (fullName === null) {
        throw new Error('Module ' + name + ' was not found.');
      }
      if (typeof cache[fullName] === 'undefined') {
        m = {
          exports: {},
          id: fullName,
          filename: fullName,
          loaded: false,
          parent: null,
          children: null
        };
        if (arrayIndexOf(creating, fullName) === -1) {
          creating.push(fullName);
          modules[fullName].apply(window, [m.exports, m]);
          creating.splice(arrayIndexOf(creating, fullName));
          cache[fullName] = m;
        }
        m.loaded = true;
      } else {
        m = cache[fullName];
      }
      if (typeof stats[fullName] === 'undefined') {
        stats[fullName] = {
          atime: null,
          mtime: null,
          ctime: null
        };
      }
      stats[fullName].atime = new Date;
      return m.exports;
    };
    resolve = function(name, parent) {
      var ext, num, part, parts, prev, result, _i, _j, _k, _len, _len1, _len2;
      if (parent == null) {
        parent = null;
      }
      if (parent !== null && name[0] === '.') {
        num = parent.lastIndexOf('/');
        if (num !== -1) {
          parent = parent.substr(0, num);
        }
        name = parent + '/' + name;
        parts = name.split('/');
        result = [];
        prev = null;
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          if (part === '.' || part === '') {
            continue;
          } else if (part === '..' && prev) {
            result.pop();
          } else {
            result.push(part);
          }
          prev = part;
        }
        name = result.join('/');
        if (parent[0] === '/') {
          name = '/' + name;
        }
      }
      if (typeof modules[name] !== 'undefined') {
        return name;
      }
      for (_j = 0, _len1 = SUPPORTED.length; _j < _len1; _j++) {
        ext = SUPPORTED[_j];
        if (typeof modules[name + '.' + ext] !== 'undefined') {
          return name + '.' + ext;
        }
      }
      for (_k = 0, _len2 = SUPPORTED.length; _k < _len2; _k++) {
        ext = SUPPORTED[_k];
        if (typeof modules[name + '/index.' + ext] !== 'undefined') {
          return name + '/index.' + ext;
        }
      }
      return null;
    };
    arrayIndexOf = function(array, search) {
      var element, i, _i, _len;
      if (typeof Array.prototype.indexOf !== 'undefined') {
        return array.indexOf(search);
      }
      if (array.length === 0) {
        return -1;
      }
      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
        element = array[i];
        if (element === search) {
          return i;
        }
      }
      return -1;
    };
    this.require = function(name, parent) {
      if (parent == null) {
        parent = null;
      }
      return require(name, parent);
    };
    this.require.simq = true;
    this.require.version = 1;
    this.require.resolve = function(name, parent) {
      if (parent == null) {
        parent = null;
      }
      return resolve(name, parent);
    };
    this.require.define = function(bundleOrName, obj) {
      var m, name, _results;
      if (obj == null) {
        obj = null;
      }
      if (typeof bundleOrName === 'string') {
        return modules[bundleOrName] = obj;
      } else {
        _results = [];
        for (name in bundleOrName) {
          m = bundleOrName[name];
          _results.push(modules[name] = m);
        }
        return _results;
      }
    };
    this.require.release = function() {
      var name, _results;
      _results = [];
      for (name in cache) {
        _results.push(delete cache[name]);
      }
      return _results;
    };
    this.require.getStats = function(name, parent) {
      var fullName;
      if (parent == null) {
        parent = null;
      }
      fullName = resolve(name, parent);
      if (fullName === null) {
        throw new Error('Module ' + name + ' was not found.');
      }
      if (typeof stats[fullName] === 'undefined') {
        stats[fullName] = {
          atime: null,
          mtime: null,
          ctime: null
        };
      }
      return stats[fullName];
    };
    this.require.__setStats = function(bundle) {
      var data, name, _results;
      _results = [];
      for (name in bundle) {
        data = bundle[name];
        _results.push(stats[name] = {
          atime: new Date(data.atime),
          mtime: new Date(data.mtime),
          ctime: new Date(data.ctime)
        });
      }
      return _results;
    };
    this.require.cache = cache;
  }

  return this.require.define;

}).call(this)({
 'spine/index.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'spine/index.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'spine/index.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'spine/index.js';
	var __dirname = 'spine';
	var process = {cwd: function() {return '/';}, argv: ['node', 'spine/index.js'], env: {}};

	/** code **/
	module.exports = require('./lib/spine');

}, 'spine/lib/spine.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'spine/lib/spine.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'spine/lib/spine.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'spine/lib/spine.js';
	var __dirname = 'spine/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'spine/lib/spine.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	/*
	Spine.js MVC library
	Released under the MIT License
	*/
	
	
	(function() {
	  var $, Controller, Events, Log, Model, Module, Spine, createObject, isArray, isBlank, makeArray, moduleKeywords,
	    __slice = [].slice,
	    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
	
	  Events = {
	    bind: function(ev, callback) {
	      var calls, evs, name, _i, _len;
	      evs = ev.split(' ');
	      calls = this.hasOwnProperty('_callbacks') && this._callbacks || (this._callbacks = {});
	      for (_i = 0, _len = evs.length; _i < _len; _i++) {
	        name = evs[_i];
	        calls[name] || (calls[name] = []);
	        calls[name].push(callback);
	      }
	      return this;
	    },
	    one: function(ev, callback) {
	      var handler;
	      return this.bind(ev, handler = function() {
	        this.unbind(ev, handler);
	        return callback.apply(this, arguments);
	      });
	    },
	    trigger: function() {
	      var args, callback, ev, list, _i, _len, _ref;
	      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      ev = args.shift();
	      list = this.hasOwnProperty('_callbacks') && ((_ref = this._callbacks) != null ? _ref[ev] : void 0);
	      if (!list) {
	        return;
	      }
	      for (_i = 0, _len = list.length; _i < _len; _i++) {
	        callback = list[_i];
	        if (callback.apply(this, args) === false) {
	          break;
	        }
	      }
	      return true;
	    },
	    listenTo: function(obj, ev, callback) {
	      obj.bind(ev, callback);
	      this.listeningTo || (this.listeningTo = []);
	      this.listeningTo.push({
	        obj: obj,
	        ev: ev,
	        callback: callback
	      });
	      return this;
	    },
	    listenToOnce: function(obj, ev, callback) {
	      var handler, listeningToOnce;
	      listeningToOnce = this.listeningToOnce || (this.listeningToOnce = []);
	      obj.bind(ev, handler = function() {
	        var i, idx, lt, _i, _len;
	        idx = -1;
	        for (i = _i = 0, _len = listeningToOnce.length; _i < _len; i = ++_i) {
	          lt = listeningToOnce[i];
	          if (lt.obj === obj) {
	            if (lt.ev === ev && lt.callback === callback) {
	              idx = i;
	            }
	          }
	        }
	        obj.unbind(ev, handler);
	        if (idx !== -1) {
	          listeningToOnce.splice(idx, 1);
	        }
	        return callback.apply(this, arguments);
	      });
	      listeningToOnce.push({
	        obj: obj,
	        ev: ev,
	        callback: callback,
	        handler: handler
	      });
	      return this;
	    },
	    stopListening: function(obj, events, callback) {
	      var ev, evts, i, idx, listeningTo, lt, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
	      if (arguments.length === 0) {
	        _ref = [this.listeningTo, this.listeningToOnce];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          listeningTo = _ref[_i];
	          if (!listeningTo) {
	            continue;
	          }
	          for (_j = 0, _len1 = listeningTo.length; _j < _len1; _j++) {
	            lt = listeningTo[_j];
	            lt.obj.unbind(lt.ev, lt.handler || lt.callback);
	          }
	        }
	        this.listeningTo = void 0;
	        return this.listeningToOnce = void 0;
	      } else if (obj) {
	        _ref1 = [this.listeningTo, this.listeningToOnce];
	        _results = [];
	        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
	          listeningTo = _ref1[_k];
	          if (!listeningTo) {
	            continue;
	          }
	          events = events ? events.split(' ') : [void 0];
	          _results.push((function() {
	            var _l, _len3, _results1;
	            _results1 = [];
	            for (_l = 0, _len3 = events.length; _l < _len3; _l++) {
	              ev = events[_l];
	              _results1.push((function() {
	                var _m, _ref2, _results2;
	                _results2 = [];
	                for (idx = _m = _ref2 = listeningTo.length - 1; _ref2 <= 0 ? _m <= 0 : _m >= 0; idx = _ref2 <= 0 ? ++_m : --_m) {
	                  lt = listeningTo[idx];
	                  if ((!ev) || (ev === lt.ev)) {
	                    lt.obj.unbind(lt.ev, lt.handler || lt.callback);
	                    if (idx !== -1) {
	                      _results2.push(listeningTo.splice(idx, 1));
	                    } else {
	                      _results2.push(void 0);
	                    }
	                  } else if (ev) {
	                    evts = lt.ev.split(' ');
	                    if (~(i = evts.indexOf(ev))) {
	                      evts.splice(i, 1);
	                      lt.ev = $.trim(evts.join(' '));
	                      _results2.push(lt.obj.unbind(ev, lt.handler || lt.callback));
	                    } else {
	                      _results2.push(void 0);
	                    }
	                  } else {
	                    _results2.push(void 0);
	                  }
	                }
	                return _results2;
	              })());
	            }
	            return _results1;
	          })());
	        }
	        return _results;
	      }
	    },
	    unbind: function(ev, callback) {
	      var cb, evs, i, list, name, _i, _j, _len, _len1, _ref;
	      if (arguments.length === 0) {
	        this._callbacks = {};
	        return this;
	      }
	      if (!ev) {
	        return this;
	      }
	      evs = ev.split(' ');
	      for (_i = 0, _len = evs.length; _i < _len; _i++) {
	        name = evs[_i];
	        list = (_ref = this._callbacks) != null ? _ref[name] : void 0;
	        if (!list) {
	          continue;
	        }
	        if (!callback) {
	          delete this._callbacks[name];
	          continue;
	        }
	        for (i = _j = 0, _len1 = list.length; _j < _len1; i = ++_j) {
	          cb = list[i];
	          if (!(cb === callback)) {
	            continue;
	          }
	          list = list.slice();
	          list.splice(i, 1);
	          this._callbacks[name] = list;
	          break;
	        }
	      }
	      return this;
	    }
	  };
	
	  Events.on = Events.bind;
	
	  Events.off = Events.unbind;
	
	  Log = {
	    trace: true,
	    logPrefix: '(App)',
	    log: function() {
	      var args;
	      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      if (!this.trace) {
	        return;
	      }
	      if (this.logPrefix) {
	        args.unshift(this.logPrefix);
	      }
	      if (typeof console !== "undefined" && console !== null) {
	        if (typeof console.log === "function") {
	          console.log.apply(console, args);
	        }
	      }
	      return this;
	    }
	  };
	
	  moduleKeywords = ['included', 'extended'];
	
	  Module = (function() {
	    Module.include = function(obj) {
	      var key, value, _ref;
	      if (!obj) {
	        throw new Error('include(obj) requires obj');
	      }
	      for (key in obj) {
	        value = obj[key];
	        if (__indexOf.call(moduleKeywords, key) < 0) {
	          this.prototype[key] = value;
	        }
	      }
	      if ((_ref = obj.included) != null) {
	        _ref.apply(this);
	      }
	      return this;
	    };
	
	    Module.extend = function(obj) {
	      var key, value, _ref;
	      if (!obj) {
	        throw new Error('extend(obj) requires obj');
	      }
	      for (key in obj) {
	        value = obj[key];
	        if (__indexOf.call(moduleKeywords, key) < 0) {
	          this[key] = value;
	        }
	      }
	      if ((_ref = obj.extended) != null) {
	        _ref.apply(this);
	      }
	      return this;
	    };
	
	    Module.proxy = function(func) {
	      var _this = this;
	      return function() {
	        return func.apply(_this, arguments);
	      };
	    };
	
	    Module.prototype.proxy = function(func) {
	      var _this = this;
	      return function() {
	        return func.apply(_this, arguments);
	      };
	    };
	
	    function Module() {
	      if (typeof this.init === "function") {
	        this.init.apply(this, arguments);
	      }
	    }
	
	    return Module;
	
	  })();
	
	  Model = (function(_super) {
	    __extends(Model, _super);
	
	    Model.extend(Events);
	
	    Model.records = [];
	
	    Model.irecords = {};
	
	    Model.attributes = [];
	
	    Model.configure = function() {
	      var attributes, name;
	      name = arguments[0], attributes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
	      this.className = name;
	      this.deleteAll();
	      if (attributes.length) {
	        this.attributes = attributes;
	      }
	      this.attributes && (this.attributes = makeArray(this.attributes));
	      this.attributes || (this.attributes = []);
	      this.unbind();
	      return this;
	    };
	
	    Model.toString = function() {
	      return "" + this.className + "(" + (this.attributes.join(", ")) + ")";
	    };
	
	    Model.find = function(id) {
	      var record;
	      record = this.exists(id);
	      if (!record) {
	        throw new Error("\"" + this.className + "\" model could not find a record for the ID \"" + id + "\"");
	      }
	      return record;
	    };
	
	    Model.exists = function(id) {
	      var _ref;
	      return (_ref = this.irecords[id]) != null ? _ref.clone() : void 0;
	    };
	
	    Model.addRecord = function(record) {
	      if (record.id && this.irecords[record.id]) {
	        this.irecords[record.id].remove();
	      }
	      record.id || (record.id = record.cid);
	      this.records.push(record);
	      this.irecords[record.id] = record;
	      return this.irecords[record.cid] = record;
	    };
	
	    Model.refresh = function(values, options) {
	      var record, records, result, _i, _len;
	      if (options == null) {
	        options = {};
	      }
	      if (options.clear) {
	        this.deleteAll();
	      }
	      records = this.fromJSON(values);
	      if (!isArray(records)) {
	        records = [records];
	      }
	      for (_i = 0, _len = records.length; _i < _len; _i++) {
	        record = records[_i];
	        this.addRecord(record);
	      }
	      this.sort();
	      result = this.cloneArray(records);
	      this.trigger('refresh', result, options);
	      return result;
	    };
	
	    Model.select = function(callback) {
	      var record, _i, _len, _ref, _results;
	      _ref = this.records;
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        record = _ref[_i];
	        if (callback(record)) {
	          _results.push(record.clone());
	        }
	      }
	      return _results;
	    };
	
	    Model.findByAttribute = function(name, value) {
	      var record, _i, _len, _ref;
	      _ref = this.records;
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        record = _ref[_i];
	        if (record[name] === value) {
	          return record.clone();
	        }
	      }
	      return null;
	    };
	
	    Model.findAllByAttribute = function(name, value) {
	      return this.select(function(item) {
	        return item[name] === value;
	      });
	    };
	
	    Model.each = function(callback) {
	      var record, _i, _len, _ref, _results;
	      _ref = this.records;
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        record = _ref[_i];
	        _results.push(callback(record.clone()));
	      }
	      return _results;
	    };
	
	    Model.all = function() {
	      return this.cloneArray(this.records);
	    };
	
	    Model.slice = function(begin, end) {
	      if (begin == null) {
	        begin = 0;
	      }
	      return this.cloneArray(this.records.slice(begin, end));
	    };
	
	    Model.first = function(end) {
	      var _ref;
	      if (end == null) {
	        end = 1;
	      }
	      if (end > 1) {
	        return this.cloneArray(this.records.slice(0, end));
	      } else {
	        return (_ref = this.records[0]) != null ? _ref.clone() : void 0;
	      }
	    };
	
	    Model.last = function(begin) {
	      var _ref;
	      if (typeof begin === 'number') {
	        return this.cloneArray(this.records.slice(-begin));
	      } else {
	        return (_ref = this.records[this.records.length - 1]) != null ? _ref.clone() : void 0;
	      }
	    };
	
	    Model.count = function() {
	      return this.records.length;
	    };
	
	    Model.deleteAll = function() {
	      this.records = [];
	      return this.irecords = {};
	    };
	
	    Model.destroyAll = function(options) {
	      var record, _i, _len, _ref, _results;
	      _ref = this.records;
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        record = _ref[_i];
	        _results.push(record.destroy(options));
	      }
	      return _results;
	    };
	
	    Model.update = function(id, atts, options) {
	      return this.find(id).updateAttributes(atts, options);
	    };
	
	    Model.create = function(atts, options) {
	      var record;
	      record = new this(atts);
	      return record.save(options);
	    };
	
	    Model.destroy = function(id, options) {
	      return this.find(id).destroy(options);
	    };
	
	    Model.change = function(callbackOrParams) {
	      if (typeof callbackOrParams === 'function') {
	        return this.bind('change', callbackOrParams);
	      } else {
	        return this.trigger.apply(this, ['change'].concat(__slice.call(arguments)));
	      }
	    };
	
	    Model.fetch = function(callbackOrParams) {
	      if (typeof callbackOrParams === 'function') {
	        return this.bind('fetch', callbackOrParams);
	      } else {
	        return this.trigger.apply(this, ['fetch'].concat(__slice.call(arguments)));
	      }
	    };
	
	    Model.toJSON = function() {
	      return this.records;
	    };
	
	    Model.fromJSON = function(objects) {
	      var value, _i, _len, _results;
	      if (!objects) {
	        return;
	      }
	      if (typeof objects === 'string') {
	        objects = JSON.parse(objects);
	      }
	      if (isArray(objects)) {
	        _results = [];
	        for (_i = 0, _len = objects.length; _i < _len; _i++) {
	          value = objects[_i];
	          _results.push(new this(value));
	        }
	        return _results;
	      } else {
	        return new this(objects);
	      }
	    };
	
	    Model.fromForm = function() {
	      var _ref;
	      return (_ref = new this).fromForm.apply(_ref, arguments);
	    };
	
	    Model.sort = function() {
	      if (this.comparator) {
	        this.records.sort(this.comparator);
	      }
	      return this;
	    };
	
	    Model.cloneArray = function(array) {
	      var value, _i, _len, _results;
	      _results = [];
	      for (_i = 0, _len = array.length; _i < _len; _i++) {
	        value = array[_i];
	        _results.push(value.clone());
	      }
	      return _results;
	    };
	
	    Model.idCounter = 0;
	
	    Model.uid = function(prefix) {
	      var uid;
	      if (prefix == null) {
	        prefix = '';
	      }
	      uid = prefix + this.idCounter++;
	      if (this.exists(uid)) {
	        uid = this.uid(prefix);
	      }
	      return uid;
	    };
	
	    function Model(atts) {
	      Model.__super__.constructor.apply(this, arguments);
	      if (atts) {
	        this.load(atts);
	      }
	      this.cid = (atts != null ? atts.cid : void 0) || this.constructor.uid('c-');
	    }
	
	    Model.prototype.isNew = function() {
	      return !this.exists();
	    };
	
	    Model.prototype.isValid = function() {
	      return !this.validate();
	    };
	
	    Model.prototype.validate = function() {};
	
	    Model.prototype.load = function(atts) {
	      var key, value;
	      if (atts.id) {
	        this.id = atts.id;
	      }
	      for (key in atts) {
	        value = atts[key];
	        if (atts.hasOwnProperty(key) && typeof this[key] === 'function') {
	          this[key](value);
	        } else {
	          this[key] = value;
	        }
	      }
	      return this;
	    };
	
	    Model.prototype.attributes = function() {
	      var key, result, _i, _len, _ref;
	      result = {};
	      _ref = this.constructor.attributes;
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        key = _ref[_i];
	        if (key in this) {
	          if (typeof this[key] === 'function') {
	            result[key] = this[key]();
	          } else {
	            result[key] = this[key];
	          }
	        }
	      }
	      if (this.id) {
	        result.id = this.id;
	      }
	      return result;
	    };
	
	    Model.prototype.eql = function(rec) {
	      return !!(rec && rec.constructor === this.constructor && ((rec.cid === this.cid) || (rec.id && rec.id === this.id)));
	    };
	
	    Model.prototype.save = function(options) {
	      var error, record;
	      if (options == null) {
	        options = {};
	      }
	      if (options.validate !== false) {
	        error = this.validate();
	        if (error) {
	          this.trigger('error', error);
	          return false;
	        }
	      }
	      this.trigger('beforeSave', options);
	      record = this.isNew() ? this.create(options) : this.update(options);
	      this.stripCloneAttrs();
	      this.trigger('save', options);
	      return record;
	    };
	
	    Model.prototype.stripCloneAttrs = function() {
	      var key, value;
	      if (this.hasOwnProperty('cid')) {
	        return;
	      }
	      for (key in this) {
	        if (!__hasProp.call(this, key)) continue;
	        value = this[key];
	        if (this.constructor.attributes.indexOf(key) > -1) {
	          delete this[key];
	        }
	      }
	      return this;
	    };
	
	    Model.prototype.updateAttribute = function(name, value, options) {
	      var atts;
	      atts = {};
	      atts[name] = value;
	      return this.updateAttributes(atts, options);
	    };
	
	    Model.prototype.updateAttributes = function(atts, options) {
	      this.load(atts);
	      return this.save(options);
	    };
	
	    Model.prototype.changeID = function(id) {
	      var records;
	      if (id === this.id) {
	        return;
	      }
	      records = this.constructor.irecords;
	      records[id] = records[this.id];
	      if (this.cid !== this.id) {
	        delete records[this.id];
	      }
	      this.id = id;
	      return this.save();
	    };
	
	    Model.prototype.remove = function() {
	      var i, record, records, _i, _len;
	      records = this.constructor.records.slice(0);
	      for (i = _i = 0, _len = records.length; _i < _len; i = ++_i) {
	        record = records[i];
	        if (!(this.eql(record))) {
	          continue;
	        }
	        records.splice(i, 1);
	        break;
	      }
	      this.constructor.records = records;
	      delete this.constructor.irecords[this.id];
	      return delete this.constructor.irecords[this.cid];
	    };
	
	    Model.prototype.destroy = function(options) {
	      if (options == null) {
	        options = {};
	      }
	      this.trigger('beforeDestroy', options);
	      this.remove();
	      this.destroyed = true;
	      this.trigger('destroy', options);
	      this.trigger('change', 'destroy', options);
	      if (this.listeningTo) {
	        this.stopListening();
	      }
	      this.unbind();
	      return this;
	    };
	
	    Model.prototype.dup = function(newRecord) {
	      var atts;
	      if (newRecord == null) {
	        newRecord = true;
	      }
	      atts = this.attributes();
	      if (newRecord) {
	        delete atts.id;
	      } else {
	        atts.cid = this.cid;
	      }
	      return new this.constructor(atts);
	    };
	
	    Model.prototype.clone = function() {
	      return createObject(this);
	    };
	
	    Model.prototype.reload = function() {
	      var original;
	      if (this.isNew()) {
	        return this;
	      }
	      original = this.constructor.find(this.id);
	      this.load(original.attributes());
	      return original;
	    };
	
	    Model.prototype.refresh = function(data) {
	      var root;
	      root = this.constructor.irecords[this.id];
	      root.load(data);
	      this.trigger('refresh');
	      return this;
	    };
	
	    Model.prototype.toJSON = function() {
	      return this.attributes();
	    };
	
	    Model.prototype.toString = function() {
	      return "<" + this.constructor.className + " (" + (JSON.stringify(this)) + ")>";
	    };
	
	    Model.prototype.fromForm = function(form) {
	      var checkbox, key, name, result, _i, _j, _k, _len, _len1, _len2, _name, _ref, _ref1, _ref2;
	      result = {};
	      _ref = $(form).find('[type=checkbox]:not([value])');
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        checkbox = _ref[_i];
	        result[checkbox.name] = $(checkbox).prop('checked');
	      }
	      _ref1 = $(form).find('[type=checkbox][name$="[]"]');
	      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
	        checkbox = _ref1[_j];
	        name = checkbox.name.replace(/\[\]$/, '');
	        result[name] || (result[name] = []);
	        if ($(checkbox).prop('checked')) {
	          result[name].push(checkbox.value);
	        }
	      }
	      _ref2 = $(form).serializeArray();
	      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
	        key = _ref2[_k];
	        result[_name = key.name] || (result[_name] = key.value);
	      }
	      return this.load(result);
	    };
	
	    Model.prototype.exists = function() {
	      return this.constructor.exists(this.id);
	    };
	
	    Model.prototype.update = function(options) {
	      var clone, records;
	      this.trigger('beforeUpdate', options);
	      records = this.constructor.irecords;
	      records[this.id].load(this.attributes());
	      this.constructor.sort();
	      clone = records[this.id].clone();
	      clone.trigger('update', options);
	      clone.trigger('change', 'update', options);
	      return clone;
	    };
	
	    Model.prototype.create = function(options) {
	      var clone, record;
	      this.trigger('beforeCreate', options);
	      this.id || (this.id = this.cid);
	      record = this.dup(false);
	      this.constructor.addRecord(record);
	      this.constructor.sort();
	      clone = record.clone();
	      clone.trigger('create', options);
	      clone.trigger('change', 'create', options);
	      return clone;
	    };
	
	    Model.prototype.bind = function(events, callback) {
	      var binder, singleEvent, _fn, _i, _len, _ref,
	        _this = this;
	      this.constructor.bind(events, binder = function(record) {
	        if (record && _this.eql(record)) {
	          return callback.apply(_this, arguments);
	        }
	      });
	      _ref = events.split(' ');
	      _fn = function(singleEvent) {
	        var unbinder;
	        return _this.constructor.bind("unbind", unbinder = function(record, event, cb) {
	          if (record && _this.eql(record)) {
	            if (event && event !== singleEvent) {
	              return;
	            }
	            if (cb && cb !== callback) {
	              return;
	            }
	            _this.constructor.unbind(singleEvent, binder);
	            return _this.constructor.unbind("unbind", unbinder);
	          }
	        });
	      };
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        singleEvent = _ref[_i];
	        _fn(singleEvent);
	      }
	      return this;
	    };
	
	    Model.prototype.one = function(events, callback) {
	      var handler,
	        _this = this;
	      return this.bind(events, handler = function() {
	        _this.unbind(events, handler);
	        return callback.apply(_this, arguments);
	      });
	    };
	
	    Model.prototype.trigger = function() {
	      var args, _ref;
	      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      args.splice(1, 0, this);
	      return (_ref = this.constructor).trigger.apply(_ref, args);
	    };
	
	    Model.prototype.listenTo = function() {
	      return Events.listenTo.apply(this, arguments);
	    };
	
	    Model.prototype.listenToOnce = function() {
	      return Events.listenToOnce.apply(this, arguments);
	    };
	
	    Model.prototype.stopListening = function() {
	      return Events.stopListening.apply(this, arguments);
	    };
	
	    Model.prototype.unbind = function(events, callback) {
	      var event, _i, _len, _ref, _results;
	      if (arguments.length === 0) {
	        return this.trigger('unbind');
	      } else if (events) {
	        _ref = events.split(' ');
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          event = _ref[_i];
	          _results.push(this.trigger('unbind', event, callback));
	        }
	        return _results;
	      }
	    };
	
	    return Model;
	
	  })(Module);
	
	  Model.prototype.on = Model.prototype.bind;
	
	  Model.prototype.off = Model.prototype.unbind;
	
	  Controller = (function(_super) {
	    __extends(Controller, _super);
	
	    Controller.include(Events);
	
	    Controller.include(Log);
	
	    Controller.prototype.eventSplitter = /^(\S+)\s*(.*)$/;
	
	    Controller.prototype.tag = 'div';
	
	    function Controller(options) {
	      this.release = __bind(this.release, this);
	      var context, key, parent_prototype, value, _ref;
	      this.options = options;
	      _ref = this.options;
	      for (key in _ref) {
	        value = _ref[key];
	        this[key] = value;
	      }
	      if (!this.el) {
	        this.el = document.createElement(this.tag);
	      }
	      this.el = $(this.el);
	      this.$el = this.el;
	      if (this.className) {
	        this.el.addClass(this.className);
	      }
	      if (this.attributes) {
	        this.el.attr(this.attributes);
	      }
	      if (!this.events) {
	        this.events = this.constructor.events;
	      }
	      if (!this.elements) {
	        this.elements = this.constructor.elements;
	      }
	      context = this;
	      while (parent_prototype = context.constructor.__super__) {
	        if (parent_prototype.events) {
	          this.events = $.extend({}, parent_prototype.events, this.events);
	        }
	        if (parent_prototype.elements) {
	          this.elements = $.extend({}, parent_prototype.elements, this.elements);
	        }
	        context = parent_prototype;
	      }
	      if (this.events) {
	        this.delegateEvents(this.events);
	      }
	      if (this.elements) {
	        this.refreshElements();
	      }
	      Controller.__super__.constructor.apply(this, arguments);
	    }
	
	    Controller.prototype.release = function() {
	      this.trigger('release', this);
	      this.el.remove();
	      this.unbind();
	      return this.stopListening();
	    };
	
	    Controller.prototype.$ = function(selector) {
	      return $(selector, this.el);
	    };
	
	    Controller.prototype.delegateEvents = function(events) {
	      var eventName, key, match, method, selector, _results,
	        _this = this;
	      _results = [];
	      for (key in events) {
	        method = events[key];
	        if (typeof method === 'function') {
	          method = (function(method) {
	            return function() {
	              method.apply(_this, arguments);
	              return true;
	            };
	          })(method);
	        } else {
	          if (!this[method]) {
	            throw new Error("" + method + " doesn't exist");
	          }
	          method = (function(method) {
	            return function() {
	              _this[method].apply(_this, arguments);
	              return true;
	            };
	          })(method);
	        }
	        match = key.match(this.eventSplitter);
	        eventName = match[1];
	        selector = match[2];
	        if (selector === '') {
	          _results.push(this.el.bind(eventName, method));
	        } else {
	          _results.push(this.el.on(eventName, selector, method));
	        }
	      }
	      return _results;
	    };
	
	    Controller.prototype.refreshElements = function() {
	      var key, value, _ref, _results;
	      _ref = this.elements;
	      _results = [];
	      for (key in _ref) {
	        value = _ref[key];
	        _results.push(this[value] = this.$(key));
	      }
	      return _results;
	    };
	
	    Controller.prototype.delay = function(func, timeout) {
	      return setTimeout(this.proxy(func), timeout || 0);
	    };
	
	    Controller.prototype.html = function(element) {
	      this.el.html(element.el || element);
	      this.refreshElements();
	      return this.el;
	    };
	
	    Controller.prototype.append = function() {
	      var e, elements, _ref;
	      elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      elements = (function() {
	        var _i, _len, _results;
	        _results = [];
	        for (_i = 0, _len = elements.length; _i < _len; _i++) {
	          e = elements[_i];
	          _results.push(e.el || e);
	        }
	        return _results;
	      })();
	      (_ref = this.el).append.apply(_ref, elements);
	      this.refreshElements();
	      return this.el;
	    };
	
	    Controller.prototype.appendTo = function(element) {
	      this.el.appendTo(element.el || element);
	      this.refreshElements();
	      return this.el;
	    };
	
	    Controller.prototype.prepend = function() {
	      var e, elements, _ref;
	      elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	      elements = (function() {
	        var _i, _len, _results;
	        _results = [];
	        for (_i = 0, _len = elements.length; _i < _len; _i++) {
	          e = elements[_i];
	          _results.push(e.el || e);
	        }
	        return _results;
	      })();
	      (_ref = this.el).prepend.apply(_ref, elements);
	      this.refreshElements();
	      return this.el;
	    };
	
	    Controller.prototype.replace = function(element) {
	      var previous, _ref, _ref1;
	      element = element.el || element;
	      if (typeof element === "string") {
	        element = $.trim(element);
	      }
	      _ref1 = [this.el, $(((_ref = $.parseHTML(element)) != null ? _ref[0] : void 0) || element)], previous = _ref1[0], this.el = _ref1[1];
	      previous.replaceWith(this.el);
	      this.delegateEvents(this.events);
	      this.refreshElements();
	      return this.el;
	    };
	
	    return Controller;
	
	  })(Module);
	
	  $ = (typeof window !== "undefined" && window !== null ? window.jQuery : void 0) || (typeof window !== "undefined" && window !== null ? window.Zepto : void 0) || function(element) {
	    return element;
	  };
	
	  createObject = Object.create || function(o) {
	    var Func;
	    Func = function() {};
	    Func.prototype = o;
	    return new Func();
	  };
	
	  isArray = function(value) {
	    return Object.prototype.toString.call(value) === '[object Array]';
	  };
	
	  isBlank = function(value) {
	    var key;
	    if (!value) {
	      return true;
	    }
	    for (key in value) {
	      return false;
	    }
	    return true;
	  };
	
	  makeArray = function(args) {
	    return Array.prototype.slice.call(args, 0);
	  };
	
	  Spine = this.Spine = {};
	
	  if (typeof module !== "undefined" && module !== null) {
	    module.exports = Spine;
	  }
	
	  Spine.version = '1.2.2';
	
	  Spine.isArray = isArray;
	
	  Spine.isBlank = isBlank;
	
	  Spine.$ = $;
	
	  Spine.Events = Events;
	
	  Spine.Log = Log;
	
	  Spine.Module = Module;
	
	  Spine.Controller = Controller;
	
	  Spine.Model = Model;
	
	  Module.extend.call(Spine, Events);
	
	  Module.create = Module.sub = Controller.create = Controller.sub = Model.sub = function(instances, statics) {
	    var Result, _ref;
	    Result = (function(_super) {
	      __extends(Result, _super);
	
	      function Result() {
	        _ref = Result.__super__.constructor.apply(this, arguments);
	        return _ref;
	      }
	
	      return Result;
	
	    })(this);
	    if (instances) {
	      Result.include(instances);
	    }
	    if (statics) {
	      Result.extend(statics);
	    }
	    if (typeof Result.unbind === "function") {
	      Result.unbind();
	    }
	    return Result;
	  };
	
	  Model.setup = function(name, attributes) {
	    var Instance, _ref;
	    if (attributes == null) {
	      attributes = [];
	    }
	    Instance = (function(_super) {
	      __extends(Instance, _super);
	
	      function Instance() {
	        _ref = Instance.__super__.constructor.apply(this, arguments);
	        return _ref;
	      }
	
	      return Instance;
	
	    })(this);
	    Instance.configure.apply(Instance, [name].concat(__slice.call(attributes)));
	    return Instance;
	  };
	
	  Spine.Class = Module;
	
	}).call(this);
	
	/*
	//@ sourceMappingURL=spine.map
	*/
	

}, 'is-mobile/index.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'is-mobile/index.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'is-mobile/index.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'is-mobile/index.js';
	var __dirname = 'is-mobile';
	var process = {cwd: function() {return '/';}, argv: ['node', 'is-mobile/index.js'], env: {}};

	/** code **/
	module.exports = isMobile;
	
	function isMobile (ua) {
	  if (!ua && typeof navigator != 'undefined') ua = navigator.userAgent;
	  if (ua && ua.headers && typeof ua.headers['user-agent'] == 'string') {
	    ua = ua.headers['user-agent'];
	  }
	  if (typeof ua != 'string') return false;
	
	  return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(ua) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(ua.substr(0,4));
	}
	
	

}, 'dependency-injection/lib/DI.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'dependency-injection/lib/DI.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'dependency-injection/lib/DI.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'dependency-injection/lib/DI.js';
	var __dirname = 'dependency-injection/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'dependency-injection/lib/DI.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var DI, Helpers, Service,
	    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };
	
	  Service = require('./Service');
	
	  Helpers = require('./Helpers');
	
	  DI = (function() {
	    DI.prototype.services = null;
	
	    DI.prototype.reserved = ['di'];
	
	    DI.prototype.creating = null;
	
	    function DI() {
	      var di;
	      di = new Service(this, 'di', this);
	      di.instantiate = false;
	      di.injectMethods = false;
	      this.services = {
	        di: di
	      };
	      this.creating = [];
	    }
	
	    DI.prototype.addService = function(name, service, args) {
	      if (args == null) {
	        args = [];
	      }
	      if (__indexOf.call(this.reserved, name) >= 0) {
	        throw new Error("DI: name '" + name + "' is reserved by DI.");
	      }
	      this.services[name] = new Service(this, name, service, args);
	      return this.services[name];
	    };
	
	    DI.prototype.autowireArguments = function(method, args) {
	      if (args == null) {
	        args = [];
	      }
	      Helpers.log('Method autowireArguments is deprecated, use the same method in Helpers class.');
	      return Helpers.autowireArguments(method, args, this);
	    };
	
	    DI.prototype.createInstance = function(service, args, instantiate, injectMethods) {
	      var method;
	      if (args == null) {
	        args = [];
	      }
	      if (instantiate == null) {
	        instantiate = true;
	      }
	      if (injectMethods == null) {
	        injectMethods = true;
	      }
	      if (instantiate === true) {
	        if (Object.prototype.toString.call(service.prototype.constructor) === '[Function]') {
	          service = this.inject(service, {}, args);
	        } else {
	          service = Helpers.createInstance(service, args, this);
	        }
	      }
	      if (Object.prototype.toString.call(service) === '[object Object]' && injectMethods) {
	        for (method in service) {
	          if (method.match(/^inject/) !== null) {
	            this.inject(service[method], service);
	          }
	        }
	      }
	      return service;
	    };
	
	    DI.prototype.inject = function(fn, scope, args) {
	      if (scope == null) {
	        scope = {};
	      }
	      if (args == null) {
	        args = [];
	      }
	      if (!(fn instanceof Function)) {
	        throw new Error('DI: Inject method can be called only on functions.');
	      }
	      args = Helpers.autowireArguments(fn, args, this);
	      return fn.apply(scope, args);
	    };
	
	    DI.prototype.hasDefinition = function(name) {
	      return typeof this.services[name] !== 'undefined';
	    };
	
	    DI.prototype.findDefinitionByName = function(name, need) {
	      if (need == null) {
	        need = true;
	      }
	      if (!this.hasDefinition(name)) {
	        if (need === true) {
	          throw new Error("DI: Service '" + name + "' was not found.");
	        } else {
	          return null;
	        }
	      }
	      return this.services[name];
	    };
	
	    DI.prototype.getByName = function(name) {
	      Helpers.log('DI: Method getByName is deprecated, use get method.');
	      return this.get(name);
	    };
	
	    DI.prototype.get = function(name) {
	      return this.findDefinitionByName(name).getInstance();
	    };
	
	    DI.prototype.create = function(name) {
	      return this.findDefinitionByName(name).create();
	    };
	
	    DI.prototype.getFactory = function(name) {
	      var _this = this;
	      return function() {
	        return _this.findDefinitionByName(name).create();
	      };
	    };
	
	    return DI;
	
	  })();
	
	  module.exports = DI;
	
	}).call(this);
	

}, 'dependency-injection/lib/Service.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'dependency-injection/lib/Service.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'dependency-injection/lib/Service.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'dependency-injection/lib/Service.js';
	var __dirname = 'dependency-injection/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'dependency-injection/lib/Service.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var Helpers, Service;
	
	  Helpers = require('./Helpers');
	
	  Service = (function() {
	    Service.prototype.di = null;
	
	    Service.prototype.name = null;
	
	    Service.prototype.service = null;
	
	    Service.prototype["arguments"] = null;
	
	    Service.prototype.instantiate = true;
	
	    Service.prototype.autowired = true;
	
	    Service.prototype.injectMethods = true;
	
	    Service.prototype.setup = null;
	
	    Service.prototype.instance = null;
	
	    function Service(di, name, service, _arguments) {
	      this.di = di;
	      this.name = name;
	      this.service = service;
	      this["arguments"] = _arguments != null ? _arguments : [];
	      this.setup = {};
	    }
	
	    Service.prototype.getInstance = function() {
	      if (this.instance === null) {
	        this.instance = this.create();
	      }
	      return this.instance;
	    };
	
	    Service.prototype.create = function() {
	      var args, e, method, names, s, service, _ref;
	      if (Helpers.arrayIndexOf(this.di.creating, this.name) !== -1) {
	        s = this.di.creating.length === 1 ? '' : 's';
	        names = this.di.creating.join(', ');
	        throw new Error("Circular reference detected for service" + s + ": " + names + ".");
	      }
	      this.di.creating.push(this.name);
	      service = this.service;
	      if (Object.prototype.toString.call(service) === '[object String]') {
	        service = require(service);
	      }
	      try {
	        service = this.di.createInstance(service, this["arguments"], this.instantiate, this.injectMethods);
	        _ref = this.setup;
	        for (method in _ref) {
	          args = _ref[method];
	          if (this.setup.hasOwnProperty(method)) {
	            if (typeof service[method] === 'function') {
	              service[method].apply(service, Helpers.autowireArguments(service[method], args, this.di));
	            } else {
	              service[method] = args;
	            }
	          }
	        }
	      } catch (_error) {
	        e = _error;
	        this.di.creating.splice(Helpers.arrayIndexOf(this.di.creating, this.name), 1);
	        throw e;
	      }
	      this.di.creating.splice(Helpers.arrayIndexOf(this.di.creating, this.name), 1);
	      return service;
	    };
	
	    Service.prototype.addSetup = function(method, args) {
	      if (args == null) {
	        args = [];
	      }
	      this.setup[method] = args;
	      return this;
	    };
	
	    Service.prototype.setInstantiate = function(instantiate) {
	      this.instantiate = instantiate;
	      return this;
	    };
	
	    Service.prototype.setAutowired = function(autowired) {
	      this.autowired = autowired;
	      return this;
	    };
	
	    return Service;
	
	  })();
	
	  module.exports = Service;
	
	}).call(this);
	

}, 'dependency-injection/lib/Helpers.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'dependency-injection/lib/Helpers.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'dependency-injection/lib/Helpers.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'dependency-injection/lib/Helpers.js';
	var __dirname = 'dependency-injection/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'dependency-injection/lib/Helpers.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var Helpers;
	
	  Helpers = (function() {
	    function Helpers() {}
	
	    Helpers.clone = function(obj) {
	      var key, result, value, _i, _len, _ref, _ref1, _type;
	      _type = Object.prototype.toString;
	      switch (_type.call(obj)) {
	        case '[object Array]':
	          result = [];
	          for (key = _i = 0, _len = obj.length; _i < _len; key = ++_i) {
	            value = obj[key];
	            if ((_ref = _type.call(value)) === '[object Array]' || _ref === '[object Object]') {
	              result[key] = Helpers.clone(value);
	            } else {
	              result[key] = value;
	            }
	          }
	          break;
	        case '[object Object]':
	          result = {};
	          for (key in obj) {
	            value = obj[key];
	            if ((_ref1 = _type.call(value)) === '[object Array]' || _ref1 === '[object Object]') {
	              result[key] = Helpers.clone(value);
	            } else {
	              result[key] = value;
	            }
	          }
	          break;
	        default:
	          return obj;
	      }
	      return result;
	    };
	
	    Helpers.log = function(message) {
	      if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
	        return console.log(message);
	      }
	    };
	
	    Helpers.arrayIndexOf = function(array, search) {
	      var element, i, _i, _len;
	      if (typeof Array.prototype.indexOf !== 'undefined') {
	        return array.indexOf(search);
	      }
	      if (array.length === 0) {
	        return -1;
	      }
	      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
	        element = array[i];
	        if (element === search) {
	          return i;
	        }
	      }
	      return -1;
	    };
	
	    Helpers.createInstance = function(service, args, container) {
	      var wrapper;
	      if (args == null) {
	        args = [];
	      }
	      wrapper = function(obj, args) {
	        var f;
	        if (args == null) {
	          args = [];
	        }
	        f = function() {
	          return obj.apply(this, args);
	        };
	        f.prototype = obj.prototype;
	        return f;
	      };
	      return new (wrapper(service, Helpers.autowireArguments(service, args, container)));
	    };
	
	    Helpers.getArguments = function(method) {
	      var args;
	      method = method.toString();
	      method = method.replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg, '');
	      args = method.slice(method.indexOf('(') + 1, method.indexOf(')')).match(/([^\s,]+)/g);
	      args = args === null ? [] : args;
	      return args;
	    };
	
	    Helpers.autowireArguments = function(method, args, container) {
	      var dots, factory, parameter, previousDots, result, service, _i, _len, _ref;
	      if (args == null) {
	        args = [];
	      }
	      result = [];
	      factory = false;
	      dots = false;
	      previousDots = false;
	      args = Helpers.clone(args);
	      _ref = Helpers.getArguments(method);
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        parameter = _ref[_i];
	        if (typeof args[0] !== 'undefined' && args[0] === '...') {
	          dots = true;
	        }
	        if (parameter.match(/Factory$/) !== null) {
	          parameter = parameter.substring(0, parameter.length - 7);
	          factory = true;
	        }
	        if (typeof args[0] === 'undefined' || dots || (container.hasDefinition(parameter) && previousDots)) {
	          service = container.findDefinitionByName(parameter);
	          if (service.autowired === false) {
	            throw new Error("DI: Service '" + parameter + "' in not autowired.");
	          }
	          if (factory === true) {
	            result.push(container.getFactory(parameter));
	          } else {
	            result.push(container.get(parameter));
	          }
	          if (dots) {
	            args.shift();
	          }
	          previousDots = true;
	        } else {
	          if (args[0] !== null && typeof args[0] === 'string' && args[0].match(/^@/) !== null) {
	            args[0] = args[0].substr(1);
	            result.push(container.get(args[0]));
	          } else {
	            result.push(args[0]);
	          }
	          previousDots = false;
	          args.shift();
	        }
	        factory = false;
	        dots = false;
	      }
	      return result;
	    };
	
	    return Helpers;
	
	  })();
	
	  module.exports = Helpers;
	
	}).call(this);
	

}, '/test/tests/Controller.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/tests/Controller.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/tests/Controller.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/tests/Controller.coffee';
	var __dirname = '/test/tests';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/tests/Controller.coffee'], env: {}};

	/** code **/
	(function() {
	  var Controller, First, Second;
	
	  Controller = require('extended-spine/Controller');
	
	  Controller.init($, false);
	
	  First = require('/test/app/controllers/First');
	
	  Second = require('/test/app/controllers/Second');
	
	  describe('Controller', function() {
	    describe('#findElementsWithController()', function() {
	      it('should find controllers elements in test element', function() {
	        return expect(Controller.findElementsWithController('#test').length).to.be.equal(2);
	      });
	      it('should find controllers elements in html', function() {
	        return expect(Controller.findElementsWithController().length).to.be.equal(5);
	      });
	      return it('should find controllers elements in test element except container', function() {
	        return expect(Controller.findElementsWithController('#test3', false).length).to.be.equal(1);
	      });
	    });
	    describe('#createController()', function() {
	      it('should create controller for element', function() {
	        var c, fullName, name;
	        c = Controller.createController('/test/app/controllers/First', $('#test div:first'));
	        name = '/test/app/controllers/First';
	        fullName = name + '.coffee';
	        expect(c).to.be.an["instanceof"](First);
	        expect(c.el.attr(Controller.DATA_CONTROLLER_NAME)).to.be.equal(name);
	        expect(c.el.attr(Controller.DATA_CONTROLLER_FULL_NAME)).to.be.equal(fullName);
	        expect(c.fullName).to.be.equal(fullName);
	        expect(Controller.controllers).to.contain.keys([fullName]);
	        expect(Controller.controllers[fullName]).to.be.equal(c);
	        return expect(Controller.controllers.__unknown__).to.be.empty;
	      });
	      it('should create controller with constructor for element', function() {
	        var c;
	        c = Controller.createController('/test/app/controllers/Second', $('#test div:last'));
	        expect(c).to.be.an["instanceof"](Second);
	        return expect(c.el.attr(Controller.DATA_CONTROLLER_NAME)).to.be.equal('/test/app/controllers/Second');
	      });
	      it('should create controller for element', function() {
	        var c;
	        c = Controller.createController('/test/app/controllers/First', $('#test div:first'));
	        expect(c).to.be.an["instanceof"](First);
	        expect(c.el.attr(Controller.DATA_CONTROLLER_NAME)).to.be.equal('/test/app/controllers/First');
	        return expect(c.el.attr('id')).to.have.string('_controller');
	      });
	      return it('should create controller with constructor for element', function() {
	        var c;
	        c = Controller.createController('/test/app/controllers/Second', $('#test div:last'));
	        expect(c).to.be.an["instanceof"](Second);
	        return expect(c.el.attr(Controller.DATA_CONTROLLER_NAME)).to.be.equal('/test/app/controllers/Second');
	      });
	    });
	    describe('#refresh()', function() {
	      return it('should register all controllers in application div', function() {
	        Controller.refresh("[" + Controller.DATA_APPLICATION_SCOPE_NAME + "]");
	        expect($('#test3').getController()).to.be.an["instanceof"](require('/test/app/controllers/Application'));
	        expect($('#test3 div:first').data(Controller.DATA_INSTANCE_NAME)).to.be.an["instanceof"](require('/test/app/controllers/Fourth'));
	        return expect($('#test3 div:last').data(Controller.DATA_INSTANCE_NAME)).to.not.exists;
	      });
	    });
	    describe('#getAllEvents()', function() {
	      return it('should return list of parsed events from controller all it\'s parents', function() {
	        var c;
	        c = Controller.createController('/test/app/controllers/Events/Three', $('#test div:first'));
	        return expect(c.getAllEvents()).to.be.eql([
	          {
	            event: 'mouseout',
	            selector: null,
	            method: 'onMouseout'
	          }, {
	            event: 'mouseover',
	            selector: 'div span',
	            method: 'onMouseover'
	          }, {
	            event: 'click',
	            selector: null,
	            method: 'onClick'
	          }
	        ]);
	      });
	    });
	    describe('#find()', function() {
	      it('should find controller by its name', function() {
	        var C, c, controllers;
	        C = require('/test/app/controllers/First');
	        controllers = Controller.find('/test/app/controllers/First');
	        expect(controllers).to.be.an["instanceof"](Array);
	        expect(controllers).to.have.length(2);
	        expect(controllers[0]).to.be.an["instanceof"](C);
	        expect(controllers[1]).to.be.an["instanceof"](C);
	        c = Controller.createController('/test/app/controllers/First', $('#test div:first'));
	        controllers = Controller.find('/test/app/controllers/First');
	        expect(controllers).to.have.length(3);
	        return expect(controllers[2]).to.be.equal(c);
	      });
	      return it('should get factory for lazy controller', function() {
	        var factory;
	        factory = Controller.find('/test/app/controllers/Lazy');
	        expect(factory).to.be.a('function');
	        return expect(factory()).to.be.an["instanceof"](require('/test/app/controllers/Lazy'));
	      });
	    });
	    return describe('#jQuery.getController()', function() {
	      return it('should get registered controller from element', function() {
	        var el;
	        el = $('#test div:first');
	        Controller.createController('/test/app/controllers/First', el);
	        return expect(el.getController()).to.be.an["instanceof"](First);
	      });
	    });
	  });
	
	}).call(this);
	

}, '/test/app/controllers/Application.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/app/controllers/Application.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/app/controllers/Application.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/app/controllers/Application.coffee';
	var __dirname = '/test/app/controllers';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/app/controllers/Application.coffee'], env: {}};

	/** code **/
	(function() {
	  var Application, Controller, _ref,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Controller = require('extended-spine/Controller');
	
	  Application = (function(_super) {
	    __extends(Application, _super);
	
	    function Application() {
	      _ref = Application.__super__.constructor.apply(this, arguments);
	      return _ref;
	    }
	
	    return Application;
	
	  })(Controller);
	
	  module.exports = Application;
	
	}).call(this);
	

}, '/test/app/controllers/Events/One.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/app/controllers/Events/One.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/app/controllers/Events/One.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/app/controllers/Events/One.coffee';
	var __dirname = '/test/app/controllers/Events';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/app/controllers/Events/One.coffee'], env: {}};

	/** code **/
	(function() {
	  var Controller, One, _ref,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Controller = require('extended-spine/Controller');
	
	  One = (function(_super) {
	    __extends(One, _super);
	
	    function One() {
	      _ref = One.__super__.constructor.apply(this, arguments);
	      return _ref;
	    }
	
	    One.prototype.events = {
	      'mouseout': 'onMouseout'
	    };
	
	    One.prototype.onMouseout = function(e) {};
	
	    return One;
	
	  })(Controller);
	
	  module.exports = One;
	
	}).call(this);
	

}, '/test/app/controllers/Events/Three.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/app/controllers/Events/Three.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/app/controllers/Events/Three.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/app/controllers/Events/Three.coffee';
	var __dirname = '/test/app/controllers/Events';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/app/controllers/Events/Three.coffee'], env: {}};

	/** code **/
	(function() {
	  var Controller, Three, _ref,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Controller = require('./Two');
	
	  Three = (function(_super) {
	    __extends(Three, _super);
	
	    function Three() {
	      _ref = Three.__super__.constructor.apply(this, arguments);
	      return _ref;
	    }
	
	    Three.prototype.events = {
	      'click': 'onClick'
	    };
	
	    Three.prototype.onClick = function(e) {};
	
	    return Three;
	
	  })(Controller);
	
	  module.exports = Three;
	
	}).call(this);
	

}, '/test/app/controllers/Events/Two.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/app/controllers/Events/Two.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/app/controllers/Events/Two.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/app/controllers/Events/Two.coffee';
	var __dirname = '/test/app/controllers/Events';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/app/controllers/Events/Two.coffee'], env: {}};

	/** code **/
	(function() {
	  var Controller, Two, _ref,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Controller = require('./One');
	
	  Two = (function(_super) {
	    __extends(Two, _super);
	
	    function Two() {
	      _ref = Two.__super__.constructor.apply(this, arguments);
	      return _ref;
	    }
	
	    Two.prototype.events = {
	      'mouseover div span': 'onMouseover'
	    };
	
	    Two.prototype.onMouseover = function(e) {};
	
	    return Two;
	
	  })(Controller);
	
	  module.exports = Two;
	
	}).call(this);
	

}, '/test/app/controllers/Fifth.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/app/controllers/Fifth.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/app/controllers/Fifth.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/app/controllers/Fifth.coffee';
	var __dirname = '/test/app/controllers';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/app/controllers/Fifth.coffee'], env: {}};

	/** code **/
	(function() {
	  var Controller, Fifth, _ref,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Controller = require('extended-spine/Controller');
	
	  Fifth = (function(_super) {
	    __extends(Fifth, _super);
	
	    function Fifth() {
	      _ref = Fifth.__super__.constructor.apply(this, arguments);
	      return _ref;
	    }
	
	    return Fifth;
	
	  })(Controller);
	
	  module.exports = Fifth;
	
	}).call(this);
	

}, '/test/app/controllers/First.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/app/controllers/First.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/app/controllers/First.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/app/controllers/First.coffee';
	var __dirname = '/test/app/controllers';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/app/controllers/First.coffee'], env: {}};

	/** code **/
	(function() {
	  var Controller, First, _ref,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Controller = require('extended-spine/Controller');
	
	  First = (function(_super) {
	    __extends(First, _super);
	
	    function First() {
	      _ref = First.__super__.constructor.apply(this, arguments);
	      return _ref;
	    }
	
	    return First;
	
	  })(Controller);
	
	  module.exports = First;
	
	}).call(this);
	

}, '/test/app/controllers/Fourth.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/app/controllers/Fourth.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/app/controllers/Fourth.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/app/controllers/Fourth.coffee';
	var __dirname = '/test/app/controllers';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/app/controllers/Fourth.coffee'], env: {}};

	/** code **/
	(function() {
	  var Controller, Fourth, _ref,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Controller = require('extended-spine/Controller');
	
	  Fourth = (function(_super) {
	    __extends(Fourth, _super);
	
	    function Fourth() {
	      _ref = Fourth.__super__.constructor.apply(this, arguments);
	      return _ref;
	    }
	
	    return Fourth;
	
	  })(Controller);
	
	  module.exports = Fourth;
	
	}).call(this);
	

}, '/test/app/controllers/Lazy.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/app/controllers/Lazy.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/app/controllers/Lazy.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/app/controllers/Lazy.coffee';
	var __dirname = '/test/app/controllers';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/app/controllers/Lazy.coffee'], env: {}};

	/** code **/
	(function() {
	  var Controller, Lazy, _ref,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Controller = require('extended-spine/Controller');
	
	  Lazy = (function(_super) {
	    __extends(Lazy, _super);
	
	    function Lazy() {
	      _ref = Lazy.__super__.constructor.apply(this, arguments);
	      return _ref;
	    }
	
	    return Lazy;
	
	  })(Controller);
	
	  module.exports = Lazy;
	
	}).call(this);
	

}, '/test/app/controllers/Second.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/app/controllers/Second.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/app/controllers/Second.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/app/controllers/Second.coffee';
	var __dirname = '/test/app/controllers';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/app/controllers/Second.coffee'], env: {}};

	/** code **/
	(function() {
	  var Controller, Second,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Controller = require('extended-spine/Controller');
	
	  Second = (function(_super) {
	    __extends(Second, _super);
	
	    function Second(el) {
	      this.el = el;
	      Second.__super__.constructor.apply(this, arguments);
	    }
	
	    return Second;
	
	  })(Controller);
	
	  module.exports = Second;
	
	}).call(this);
	

}, '/test/app/controllers/Third.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/app/controllers/Third.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/app/controllers/Third.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/app/controllers/Third.coffee';
	var __dirname = '/test/app/controllers';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/app/controllers/Third.coffee'], env: {}};

	/** code **/
	(function() {
	  var Controller, Third, _ref,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
	
	  Controller = require('extended-spine/Controller');
	
	  Third = (function(_super) {
	    __extends(Third, _super);
	
	    function Third() {
	      _ref = Third.__super__.constructor.apply(this, arguments);
	      return _ref;
	    }
	
	    return Third;
	
	  })(Controller);
	
	  module.exports = Third;
	
	}).call(this);
	

}, '/lib/Controller.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/lib/Controller.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/lib/Controller.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/lib/Controller.js';
	var __dirname = '/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', '/lib/Controller.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var $, Controller, DI, Spine, hasAttr, isMobile, num,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    __slice = [].slice;
	
	  Spine = require('spine');
	
	  isMobile = require('is-mobile');
	
	  DI = require('dependency-injection');
	
	  $ = null;
	
	  num = 0;
	
	  hasAttr = function(el, name) {
	    var attr;
	    attr = $(el).attr(name);
	    return typeof attr !== 'undefined' && attr !== false;
	  };
	
	  Controller = (function(_super) {
	    __extends(Controller, _super);
	
	    Controller.DATA_APPLICATION_SCOPE_NAME = 'data-application';
	
	    Controller.DATA_CONTROLLER_NAME = 'data-controller';
	
	    Controller.DATA_CONTROLLER_FULL_NAME = 'data-controller-path';
	
	    Controller.DATA_LAZY_CONTROLLER_NAME = 'data-lazy';
	
	    Controller.DATA_COMPUTER_NAME = 'data-computer';
	
	    Controller.DATA_MOBILE_NAME = 'data-mobile';
	
	    Controller.DATA_INSTANCE_NAME = '__spine_controller__';
	
	    Controller.AUTO_ID_PREFIX = '_spine_controller';
	
	    Controller.di = null;
	
	    Controller.controllers = {
	      __unknown__: []
	    };
	
	    Controller.prototype.id = null;
	
	    Controller.prototype.fullName = null;
	
	    function Controller(el) {
	      if (el == null) {
	        el = null;
	      }
	      if (!this.el && el instanceof $) {
	        this.el = el;
	      }
	      Controller.__super__.constructor.call(this, this, []);
	      if (this.el && hasAttr(this.el, Controller.DATA_CONTROLLER_FULL_NAME)) {
	        this.fullName = this.el.attr(Controller.DATA_CONTROLLER_FULL_NAME);
	      } else {
	        Controller.controllers.__unknown__.push(this);
	      }
	      this.id = this.el.attr('id');
	      this.el.data(Controller.DATA_INSTANCE_NAME, this);
	    }
	
	    Controller.init = function() {
	      var args, defaultDi, defaultScope, di, jQuery, scope, _ref;
	      jQuery = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
	      $ = jQuery;
	      defaultScope = "[" + Controller.DATA_APPLICATION_SCOPE_NAME + "]:first";
	      defaultDi = null;
	      if (args[0] instanceof DI) {
	        di = args[0];
	        scope = defaultScope;
	      } else if ((_ref = typeof args[0]) === 'string' || _ref === 'boolean') {
	        di = typeof args[1] === 'undefined' ? defaultDi : args[1];
	        scope = args[0];
	      }
	      if (di !== null && !(di instanceof DI)) {
	        throw new Error('di container must be an instance of dependency-injection class.');
	      }
	      Controller.di = di;
	      $.fn.getController = function() {
	        return Controller.find($(this));
	      };
	      if (scope !== false) {
	        return this.refresh(scope);
	      }
	    };
	
	    Controller.prototype.getAllEvents = function() {
	      var context, event, events, match, method, parent_prototype, result, selector;
	      events = this.events ? this.events : {};
	      context = this;
	      while (parent_prototype = context.constructor.__super__) {
	        if (parent_prototype.events) {
	          events = $.extend({}, parent_prototype.events, events);
	        }
	        context = parent_prototype;
	      }
	      result = [];
	      for (event in events) {
	        method = events[event];
	        match = event.match(this.eventSplitter);
	        event = match[1];
	        selector = match[2];
	        result.push({
	          event: event,
	          selector: selector === '' ? null : selector,
	          method: method
	        });
	      }
	      return result;
	    };
	
	    Controller.prototype.unbindUiEvents = function() {
	      var info, _i, _len, _ref, _results;
	      _ref = this.getAllEvents();
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        info = _ref[_i];
	        if (info.selector === null) {
	          _results.push(this.el.unbind(info.event));
	        } else {
	          _results.push(this.el.undelegate(info.selector, info.event));
	        }
	      }
	      return _results;
	    };
	
	    Controller.findElementsWithController = function(scope, self) {
	      var result;
	      if (scope == null) {
	        scope = 'html';
	      }
	      if (self == null) {
	        self = true;
	      }
	      scope = $(scope);
	      result = [];
	      if (self && hasAttr(scope, Controller.DATA_CONTROLLER_NAME)) {
	        result.push(scope);
	      }
	      scope.find("*[" + Controller.DATA_CONTROLLER_NAME + "]:not([" + Controller.DATA_LAZY_CONTROLLER_NAME + "])").each(function(i, el) {
	        return result.push($(el));
	      });
	      return result;
	    };
	
	    Controller.findElementsWithLazyController = function(scope, self) {
	      var result;
	      if (scope == null) {
	        scope = 'html';
	      }
	      if (self == null) {
	        self = true;
	      }
	      scope = $(scope);
	      result = [];
	      if (self && hasAttr(scope, Controller.DATA_LAZY_CONTROLLER_NAME)) {
	        result.push(scope);
	      }
	      scope.find("*[" + Controller.DATA_CONTROLLER_NAME + "][" + Controller.DATA_LAZY_CONTROLLER_NAME + "]").each(function(i, el) {
	        return result.push($(el));
	      });
	      return result;
	    };
	
	    Controller.refresh = function(scope, self) {
	      var el, _i, _j, _len, _len1, _ref, _ref1, _results;
	      if (scope == null) {
	        scope = 'html';
	      }
	      if (self == null) {
	        self = true;
	      }
	      _ref = Controller.findElementsWithController(scope, self);
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        el = _ref[_i];
	        Controller.createController(el.attr(Controller.DATA_CONTROLLER_NAME), el);
	      }
	      _ref1 = Controller.findElementsWithLazyController(scope, self);
	      _results = [];
	      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
	        el = _ref1[_j];
	        _results.push(el.data(Controller.DATA_CONTROLLER_FULL_NAME, require.resolve(el.attr(Controller.DATA_COMPUTER_NAME))));
	      }
	      return _results;
	    };
	
	    Controller.unbind = function(scope, self) {
	      var controller, el, _i, _len, _ref, _results;
	      if (scope == null) {
	        scope = 'html';
	      }
	      if (self == null) {
	        self = true;
	      }
	      _ref = Controller.findElementsWithController(scope, self);
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        el = _ref[_i];
	        controller = el.data(Controller.DATA_INSTANCE_NAME);
	        controller.unbind();
	        controller.stopListening();
	        controller.unbindUiEvents();
	        _results.push(el.data(Controller.DATA_INSTANCE_NAME, null));
	      }
	      return _results;
	    };
	
	    Controller.register = function(path, el) {
	      if (el == null) {
	        el = null;
	      }
	      return Controller.createController(path, el);
	    };
	
	    Controller.createController = function(name, el) {
	      var c, computer, mobile;
	      if (el == null) {
	        el = null;
	      }
	      if (el !== null) {
	        el = $(el);
	      }
	      computer = hasAttr(el, Controller.DATA_COMPUTER_NAME);
	      mobile = hasAttr(el, Controller.DATA_MOBILE_NAME);
	      if (el !== null && (computer || mobile)) {
	        if (computer && isMobile()) {
	          return false;
	        }
	        if (mobile && !isMobile()) {
	          return false;
	        }
	      }
	      if (el !== null && el.length > 0 && !hasAttr(el, 'id')) {
	        el.attr('id', Controller.AUTO_ID_PREFIX + num);
	        num++;
	      }
	      name = require.resolve(name);
	      if (el !== null) {
	        el.attr(Controller.DATA_CONTROLLER_FULL_NAME, name);
	      }
	      c = require(name);
	      if (Controller.di === null) {
	        c = new c(el);
	      } else {
	        c = Controller.di.createInstance(c, [el]);
	      }
	      if (typeof Controller.controllers[name] !== 'undefined') {
	        if (Object.prototype.toString.call(Controller.controllers[name]) !== '[object Array]') {
	          Controller.controllers[name] = [Controller.controllers[name]];
	        }
	        Controller.controllers[name].push(c);
	      } else {
	        Controller.controllers[name] = c;
	      }
	      return c;
	    };
	
	    Controller.find = function(nameOrElement) {
	      var controller, el, fullName, name, result,
	        _this = this;
	      if (typeof nameOrElement === 'string') {
	        name = nameOrElement;
	        fullName = require.resolve(name);
	        if (typeof Controller.controllers[fullName] === 'undefined') {
	          el = $("[" + Controller.DATA_CONTROLLER_FULL_NAME + "=\"" + fullName + "\"][" + Controller.DATA_LAZY_CONTROLLER_NAME + "]");
	          if (el.length === 0) {
	            el = $("[" + Controller.DATA_CONTROLLER_NAME + "=\"" + name + "\"][" + Controller.DATA_LAZY_CONTROLLER_NAME + "]");
	            if (el.length > 0) {
	              el.attr(Controller.DATA_CONTROLLER_FULL_NAME, fullName);
	            }
	          }
	          if (el.length === 0) {
	            return null;
	          } else if (el.length === 1) {
	            return function() {
	              return Controller.createController(fullName, el);
	            };
	          } else {
	            result = [];
	            el.each(function(i, el) {
	              return result.push(function() {
	                return Controller.createController(fullName, el);
	              });
	            });
	            return result;
	          }
	        }
	        return Controller.controllers[fullName];
	      } else if (nameOrElement instanceof $) {
	        el = nameOrElement;
	        controller = el.data(Controller.DATA_INSTANCE_NAME);
	        if (!controller && hasAttr(el, Controller.DATA_CONTROLLER_NAME) && hasAttr(el, Controller.DATA_LAZY_CONTROLLER_NAME)) {
	          return function() {
	            return Controller.createController(el.attr(Controller.DATA_CONTROLLER_NAME), el);
	          };
	        }
	        return controller;
	      }
	    };
	
	    return Controller;
	
	  })(Spine.Controller);
	
	  module.exports = Controller;
	
	}).call(this);
	

}, '/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/package.json';
	var __dirname = '/';
	var process = {cwd: function() {return '/';}, argv: ['node', '/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
		"name": "extended-spine",
		"description": "Some extensions for spine framework",
		"version": "1.3.0",
		"author": {
			"name": "David Kudera",
			"email": "sakren@gmail.com"
		},
		"keywords": [
			"spine",
			"angular",
			"browser",
			"controller",
			"mvc"
		],
		"repository": {
			"type": "git",
			"url": "git@github.com:sakren/node-extended-spine.git"
		},
		"license": "MIT",
		"engines": {
			"node": "*"
		},
		"dependencies": {
			"spine": "1.2.2",
			"is-mobile": "0.2.2",
			"dependency-injection": "1.8.0"
		},
		"devDependencies": {
			"chai": "1.8.1",
			"mocha": "1.15.1",
			"mocha-phantomjs": "3.2.0",
			"phantomjs": "1.9.2-5"
		},
		"scripts": {
			"test": "npm run test-build; mocha-phantomjs -p ./node_modules/phantomjs/bin/phantomjs ./test/index.html",
			"test-build": "cd ./test; simq build;"
		}
	}
	}).call(this);
	

}, 'spine/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'spine/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'spine/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'spine/package.json';
	var __dirname = 'spine';
	var process = {cwd: function() {return '/';}, argv: ['node', 'spine/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
	  "name": "spine",
	  "description": "MVC Framework.",
	  "version": "1.2.2",
	  "author": {
	    "name": "maccman"
	  },
	  "keywords": [
	    "spine",
	    "coffeescript",
	    "MVC"
	  ],
	  "contributors": [
	    {
	      "name": "maccman"
	    },
	    {
	      "name": "aeischeid"
	    },
	    {
	      "name": "cengebretson"
	    },
	    {
	      "name": "adambiggs"
	    }
	  ],
	  "devDependencies": {
	    "coffee-script": ">=1.6.3"
	  },
	  "licenses": [
	    {
	      "type": "MIT",
	      "url": "https://github.com/spine/spine/blob/master/LICENSE"
	    }
	  ],
	  "repository": {
	    "type": "git",
	    "url": "http://github.com/spine/spine.git"
	  },
	  "main": "./index.js",
	  "scripts": {
	    "test": "for i in test/*.html; do phantomjs test/lib/run-jasmine.phantom.js file://`pwd`/$i; done"
	  },
	  "readme": "# Spine\n\n[![Build Status](https://secure.travis-ci.org/maccman/spine.png)](http://travis-ci.org/maccman/spine)\n\nSpine is a lightweight framework for building JavaScript web applications. Spine gives you an MVC structure and then gets out of your way, allowing you to concentrate on the fun stuff, building awesome web applications.\n\nSpine is opinionated in its approach to web application architecture and design. Spine's architecture complements patterns such as de-coupled components and CommonJS modules, markedly helping with code quality and maintainability.\n\nThe library is written in [CoffeeScript](http://jashkenas.github.com/coffee-script), but doesn't necessarily require CoffeeScript to develop applications - you can use whichever language you're most familiar with.\n\nSpine is tiny, the core library comes in at around 600 lines of CoffeeScript code that is written in such a way as not to sacrifice readability. Being lightweight and simple is fundamental to Spine.\n\nFor documentation, usage, and examples, see: [spinejs.com](http://spinejs.com)\n",
	  "readmeFilename": "README.md",
	  "bugs": {
	    "url": "https://github.com/spine/spine/issues"
	  },
	  "homepage": "https://github.com/spine/spine",
	  "_id": "spine@1.2.2",
	  "dist": {
	    "shasum": "84cee3e0b70d3be7167f0f7f8f40d9c084e53618"
	  },
	  "_from": "spine@1.2.2",
	  "_resolved": "https://registry.npmjs.org/spine/-/spine-1.2.2.tgz"
	}
	
	}).call(this);
	

}, 'is-mobile/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'is-mobile/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'is-mobile/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'is-mobile/package.json';
	var __dirname = 'is-mobile';
	var process = {cwd: function() {return '/';}, argv: ['node', 'is-mobile/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
	  "name": "is-mobile",
	  "description": "Check if mobile browser.",
	  "version": "0.2.2",
	  "repository": {
	    "type": "git",
	    "url": "git://github.com/juliangruber/is-mobile.git"
	  },
	  "homepage": "https://github.com/juliangruber/is-mobile",
	  "main": "index.js",
	  "scripts": {
	    "test": "tape test.js"
	  },
	  "dependencies": {},
	  "devDependencies": {
	    "tape": "~1.0.4"
	  },
	  "keywords": [
	    "mobile",
	    "desktop",
	    "check",
	    "browser"
	  ],
	  "author": {
	    "name": "Julian Gruber",
	    "email": "julian@juliangruber.com",
	    "url": "http://juliangruber.com"
	  },
	  "license": "MIT",
	  "testling": {
	    "files": "test.js",
	    "browsers": [
	      "ie/8..latest",
	      "firefox/17..latest",
	      "firefox/nightly",
	      "chrome/22..latest",
	      "chrome/canary",
	      "opera/12..latest",
	      "opera/next",
	      "safari/5.1..latest",
	      "ipad/6.0..latest",
	      "iphone/6.0..latest",
	      "android-browser/4.2..latest"
	    ]
	  },
	  "readme": "\n# is-mobile\n\nCheck if mobile browser, based on useragent string.\n\n[![build status](https://secure.travis-ci.org/juliangruber/is-mobile.png)](http://travis-ci.org/juliangruber/is-mobile)\n\n[![testling badge](https://ci.testling.com/juliangruber/is-mobile.png)](https://ci.testling.com/juliangruber/is-mobile)\n\n## Example\n\n```js\nvar mobile = require('is-mobile');\n\nconsole.log(mobile());\n// => false\n```\n\n## API\n\n### mobile([user-agent])\n\nReturns true if a mobile browser is being used. If you don't specify\n`user-agent` it will use `navigator.userAgent`.\n\n### mobile(request)\n\nReturns true if the given [node.js http request](http://nodejs.org/api/http.html#http_http_incomingmessage) comes with a mobile user agent header.\n\nExample:\n\n```js\nvar http = require('http');\nvar mobile = require('is-mobile');\n\nvar server = http.createServer(function (req, res) {\n  res.end(mobile(req));\n});\n\nserver.listen(8000);\n```\n\n## Installation\n\nWith [npm](https://npmjs.org) do:\n\n```bash\nnpm install is-mobile\n```\n\nBundle for the browser with\n[browserify](https://github.com/substack/node-browserify).\n\n## Kudos\n\nTaken from [detectmobilebrowsers.com](http://detectmobilebrowsers.com/).\n\n## License\n\n(MIT)\n\nCopyright (c) 2013 Julian Gruber &lt;julian@juliangruber.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
	  "readmeFilename": "README.md",
	  "bugs": {
	    "url": "https://github.com/juliangruber/is-mobile/issues"
	  },
	  "_id": "is-mobile@0.2.2",
	  "dist": {
	    "shasum": "ead371f566891f6ff93b9164af2fd27e7a6f6378"
	  },
	  "_from": "is-mobile@0.2.2",
	  "_resolved": "https://registry.npmjs.org/is-mobile/-/is-mobile-0.2.2.tgz"
	}
	
	}).call(this);
	

}, 'dependency-injection/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'dependency-injection/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'dependency-injection/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'dependency-injection/package.json';
	var __dirname = 'dependency-injection';
	var process = {cwd: function() {return '/';}, argv: ['node', 'dependency-injection/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
	  "name": "dependency-injection",
	  "description": "Dependency injection with configuration and autowire for node js and browser",
	  "version": "1.8.0",
	  "author": {
	    "name": "David Kudera",
	    "email": "sakren@gmail.com"
	  },
	  "keywords": [
	    "di",
	    "dependency injection",
	    "autowire",
	    "configuration"
	  ],
	  "repository": {
	    "type": "git",
	    "url": "git@github.com:sakren/node-dependency-injection.git"
	  },
	  "license": "MIT",
	  "engines": {
	    "node": "*"
	  },
	  "main": "./lib/DI",
	  "dependencies": {
	    "easy-configuration": "1.6.6"
	  },
	  "devDependencies": {
	    "chai": "1.8.1",
	    "mocha": "1.15.1",
	    "mocha-phantomjs": "3.2.0",
	    "phantomjs": "1.9.2-5"
	  },
	  "scripts": {
	    "test": "npm run test-node && npm run test-browser",
	    "test-build": "cd ./test/browser; simq build;",
	    "test-node": "mocha ./test/node/index.js --reporter spec",
	    "test-browser": "mocha-phantomjs ./test/browser/index.html"
	  },
	  "readme": "[![NPM version](https://badge.fury.io/js/dependency-injection.png)](http://badge.fury.io/js/dependency-injection)\n[![Dependency Status](https://gemnasium.com/sakren/node-dependency-injection.png)](https://gemnasium.com/sakren/node-dependency-injection)\n[![Build Status](https://travis-ci.org/sakren/node-dependency-injection.png?branch=master)](https://travis-ci.org/sakren/node-dependency-injection)\n\n# Dependency injection\n\nDependency injection with configuration and autowire for node js and browser (for example in combination with [simq](https://npmjs.org/package/simq)).\n\nImagine, that you have got some classes which are used very often. You have got two options: add instance of these classes\nto window object or to any other object, or create new instance every time when you want to use them.\n\nThe problem is that first solution add some \"mess\" to the window object and the other one is even more problematic. What\nif you will want to change for example constructor of this class (it's arguments) or call some methods right after class\nis instanced? Than you will have to change these setups at every place.\n\nBut with this package, you can configure your classes at one place and then let's just \"ask\" for them. (not service locator).\n\nThis package is inspired by dependency injection in [Nette framework](http://doc.nette.org/en/dependency-injection).\n\n## Installation\n\n```\n$ npm install dependency-injection\n```\n\n## Configuration\n\nYou can see full documentation of easy-configuration [here](https://npmjs.org/package/easy-configuration). This package\nis used for configuration your services (classes).\n\n```\n{\n\t\"services\": {\n\t\t\"application\": {\n    \t\t\"service\": \"/path/to/my/application/module\",\n    \t\t\"arguments\": [\"./www\", \"someOtherVariable\"],\n    \t\t\"setup\": {\n    \t\t\t\"setApplicationName\": [\"nameOfApplication\"],\n    \t\t\t\"setSomethingOther\": [\"someUselessVariable\", \"andAnotherOne\"]\n    \t\t}\n    \t}\n\t}\n}\n```\n\nThere we set some application service with some arguments which will be given to constructor and some setup. Every time\nyou will need this service, it will have got these arguments and all setup function will be called.\n\nSection service is path for module require (common js).\n\nDI automatically look into values from setup in your module (service). If it is function, then it will be called, otherwise\nargument will be passed into this object property.\n\n## Usage\n\n```\nvar DIConfigurator = require('dependency-injection/DIConfigurator');\nvar configurator = new DIConfigurator('/path/to/your/configuration/file.json');\n\nvar di = configurator.create();\n```\n\nThis will create new instance of DI class which holding all your services.\n\nIn example below, you can see how to get your services.\n\n```\ndi.get('application');\ndi.create('application');\ndi.getFactory('application');\n```\n\n## Auto exposing into window\n\nDI can be automatically exposed into window object (when on browser). Default name for this object is `di`.\n\n```\n{\n\t\"setup\": {\n\t\t\"windowExpose\": true\n\t}\n}\n```\n\nCustom name:\n\n```\n{\n\t\"setup\": {\n\t\t\"windowExpose\": \"configurator\"\n\t}\n}\n```\n\n### get\n\nSome services may be \"singleton\" type (not really singleton but with one instance in whole application), which application\nservice is clearly is.\n\nThis method will create one instance of service and store it. Every other time, this instance will be returned.\n\n### create\n\nMethod create will just create new instance of service and will not store it.\n\n### getFactory\n\ngetFactory is almost the same like create method, but will return anonymous function, so if you then want to use it,\nyou have to call it.\n\n```\nvar application = di.getFactory('application');\napplication = application();\t\t// just call it\n```\n\n## Not instantiate services\n\nWhen you want for example use jQuery as service, you will not want to automatically call something like `new jquery`.\nSo you can tell DI, that this service will not be instantiate.\n\n```\n{\n\t\"services\": {\n\t\t\"jquery\": {\n\t\t\t\"service\": \"jquery\"\n\t\t\t\"instantiate\": false\n\t\t}\n\t}\n}\n```\n\n## Auto run services\n\nWhen you are using configuration with json files, you can set some services to be started automatically after calling\nthe `create` method.\n\n```\n{\n\t\"services\": {\n\t\t\"setup\": {\n\t\t\t\"service\": \"./path/to/setup\",\n\t\t\t\"run\": true\n\t\t}\n\t}\n}\n```\n\n## Autowiring\n\nAccessing some DI object is not so pretty like we want, so there is some nice way how to avoid it. You can let DI to \"inject\"\nall your services to other. For example if your application service needs translator service, just let DI to give it to\napplication.\n\nAll you need to do is add parameter \"translator\" to constructor of your application service. This name must be same like\nname of service in your configuration. DI then automatically give it translator service.\n\nThe same thing is also for methods. You don't have to configure them, just set name of needed service in method's arguments\nand DI will give you these services.\n\nThis is quite similar to dependency injection in [angular](http://angularjs.org/).\n\nNow in most cases you just have to use `get` method just once for create instance of your base application service\nand other services will be automatically injected.\n\nPlease, try to avoid circular dependencies (service A depends on service B and service B depends on service A).\n\n## Examples\n\nIn your configuration, you can use three dots as replacement for services.\n\nServices:\n```\nvar serviceA = function(serviceB, serviceC) { ... };\nvar serviceB = function(serviceC, namespace, item) { ... };\nvar serviceC = function(namespace, item, serviceD) { ... };\nvar serviceD = function() { ... };\n```\n\nConfiguration:\n```\n{\n\t\"services\": {\n\t\t\"serviceA\": {\n\t\t\t\"service\": \"path/to/service/A\",\n\t\t\t\"instantiate\": false\n\t\t},\n\t\t\"serviceB\": {\n\t\t\t\"service\": \"path/to/service/B\",\n\t\t\t\"arguments\": [\"...\", \"some namespace\", \"some item\"],\n\t\t\t\"instantiate\": false\n\t\t},\n\t\t\"serviceC\": {\n\t\t\t\"service\": \"path/to/service/C\",\n\t\t\t\"arguments\": [\"some namespace\", \"some item\"],\n\t\t\t\"instantiate\": false\n\t\t},\n\t\t\"serviceD\": {\n\t\t\t\"service\": \"path/to/service/D\",\n\t\t\t\"instantiate\": false\n\t\t}\n\t}\n}\n```\n\nor more expanded:\n```\n{\n\t\"services\": {\n\t\t\"serviceA\": {\n\t\t\t\"service\": \"path/to/service/A\",\n\t\t\t\"arguments\": [\"...\"],\n\t\t\t\"instantiate\": false\n\t\t},\n\t\t\"serviceB\": {\n\t\t\t\"service\": \"path/to/service/B\",\n\t\t\t\"arguments\": [\"...\", \"some namespace\", \"some item\"],\n\t\t\t\"instantiate\": false\n\t\t},\n\t\t\"serviceC\": {\n\t\t\t\"service\": \"path/to/service/C\",\n\t\t\t\"arguments\": [\"some namespace\", \"some item\", \"...\"],\n\t\t\t\"instantiate\": false\n\t\t},\n\t\t\"serviceD\": {\n\t\t\t\"service\": \"path/to/service/D\",\n\t\t\t\"arguments\": [\"...\"],\n\t\t\t\"instantiate\": false\n\t\t}\n\t}\n}\n```\n\n### Disable autowiring\n\nIf you want to disable autowiring for some service, you can set \"autowired\" option to false in your config (like instantiate).\n\nWhen you will try to autowire this service, DI will throw an error.\n\n```\n{\n\t\"services\": {\n\t\t\"setup\": {\n\t\t\t\"someName\": \"./path/to/this/service\",\n\t\t\t\"autowired\": false\n\t\t}\n\t}\n}\n```\n\n## Autowire factories\n\nYou can also let DI to autowire factories. For example if you want to get factory for translator, you will add \"Factory\"\nto the end of translator.\n\n```\nMyClass.prototype.setTranslator = function(translatorFactory) {\n\tvar translator = translatorFactory();\t\t\t// now do something with translator\n};\n```\n\n## Links to other services\n\nWhen you have got for example foreign library registered as service in this DI and want to autowire some other service into\nit, you have to use their names of methods arguments.\n\nAnother possibility is to set these services in your config.\n\n```\n{\n\t\"services\": {\n\t\t\"foreignLibrary\": {\n\t\t\t\"service\": \"path/to/service\",\n\t\t\t\"arguments\": [\n\t\t\t\t\"@translator\"\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\nNow this `foreignLibrary` will gets your `translator` service in constructor.\n\n## Autowiring DI\n\nAutowiring DI container is also possible. Only thing you need to do, is set argument with name \"di\" into your method or\nconstructor. This also means that you can not register new service with name \"di\".\n\n```\ndi.get('di');\n```\n\n## Inject methods\n\nIf your services using multiple inheritance and you want to inject some other services but it's parent need some different\nservices, then it is quite uncomfortable to set your services via constructor.\n\nIf DI find some methods with \"inject\" word in the beginning, it will automatically call and autowire these methods.\n\n## Without configuration\n\nMaybe it will be better for someone to use this DI without configuration, so here is example of application, translator\nand jquery definition.\n\n```\nvar DI = require('dependency-injection');\nvar di = new DI;\n\ndi.addService('application', require('./path/to/my/application/module'), ['./www', 'someOtherVariable'])\n\t.addSetup('setApplicationName', ['nameOfApplication'])\n\t.addSetup('setSomethingOther', ['someUselessVariable', 'andAnotherOne']);\n\ndi.addService('translator', require('./path/to/translator'))\n\t.addSetup('setLanguage', ['en']);\n\ndi.addService('jquery', 'jquery')\n\t.setInstantiate(false);\n\ndi.addService('private', '/my/private/service')\n\t.setAutowired(false);\n```\n\nInstead of path to service (second parameter in addService method) you can also use string with path, but this path will be\nthen relative to class of DI!\n\n## Create instance\n\nIf you have got some other object which you want to use with other services, but can not use configuration or DI for this,\nyou can use `createInstance` method and DI will create new instance of your object with dependencies defined in constructor\nor with inject methods.\n\n```\nvar SuperClass = require('./mySuperClass');\nvar super = di.createInstance(SuperClass, ['and some argument']);\n```\n\n## Inject method\n\nFor simple injecting services into your functions, you can use method `inject`.\n\n```\ndi.inject(function(application) {\n\tapplication.doSomeMagic();\n});\n```\n\n## Tests\n\n```\n$ npm test\n```\n\n## Changelog\n\n* 1.8.0\n\t+ Better tests (mocha does not need to be installed globally)\n\t+ Updated dependencies\n\t+ Added badges\n\t+ Added to travis\n\n* 1.7.3\n\t+ Bug with no-string arguments\n\n* 1.7.2\n\t+ Bug with functions as services\n\n* 1.7.1\n\t+ Potential bug in IE\n\n* 1.7.0\n\t+ Updated dependencies\n\t+ Added `injectMethods` to services\n\t+ Refactored autowiring\n\t+ Some optimizations\n\t+ `DI.autowireArguments` moved to `Helpers.autowireArguments`\n\t+ Throwing an error if circular reference is found\n\n* 1.6.6 - 1.6.7\n\t+ Bugs in Internet Explorer 8\n\n* 1.6.2 - 1.6.5\n\t+ Some optimizations\n\t+ Should assert module replaced with chai\n\t+ Better error messages\n\n* 1.6.1\n\t+ Bug with setting other arguments than strings\n\n* 1.6.0\n\t+ Added `get` method, `getByName` is now deprecated\n\t+ Added `inject` method\n\t+ Autowiring with @\n\n* 1.5.2\n\t+ Add setup into properties\n\n* 1.4.1\n\t+ Bug\n\n* 1.4.0\n\t+ Option for exposing di into\n\n* 1.3.2 - 1.3.3\n\t+ Bug with run option\n\n* 1.3.1\n\t+ Just some mistake in readme\n\n* 1.3.0\n\t+ Added auto run option into configuration\n\t+ Really huge mistake in readme\n\n* 1.2.3\n\t+ Autowiring parameters even if they are not in function definition\n\n* 1.2.2\n\t+ Added missing test\n\n* 1.2.1\n\t+ Added ability to inject DI container itself\n\n* 1.2.0\n\t+ Added DI.createInstance method\n\t+ DI.addService accepts also objects\n\t+ Typos in README\n\t+ Optimizations\n\t+ Added mocha tests\n\t+ Added setInstantiate method\n\t+ Added autowired option\n\n* 1.1.1\n\t+ inject methods are called before custom setup\n\n* 1.1.0\n\t+ Support for not-instantiate services\n\n* 1.0.1\n\t+ Added information about autowiring factories\n\n* 1.0.0\n\t+ Initial version",
	  "readmeFilename": "README.md",
	  "bugs": {
	    "url": "https://github.com/sakren/node-dependency-injection/issues"
	  },
	  "homepage": "https://github.com/sakren/node-dependency-injection",
	  "_id": "dependency-injection@1.8.0",
	  "dist": {
	    "shasum": "f6c693c876f8b26f7ff532ce86f3e9d47111c786"
	  },
	  "_from": "dependency-injection@1.8.0",
	  "_resolved": "https://registry.npmjs.org/dependency-injection/-/dependency-injection-1.8.0.tgz"
	}
	
	}).call(this);
	

}, 'extended-spine/Controller': function(exports, module) { module.exports = window.require('/lib/Controller.js'); }
, 'spine': function(exports, module) { module.exports = window.require('spine/index.js'); }
, 'is-mobile': function(exports, module) { module.exports = window.require('is-mobile/index.js'); }
, 'dependency-injection': function(exports, module) { module.exports = window.require('dependency-injection/lib/DI.js'); }

});
require.__setStats({"spine/index.js":{"atime":1386777306000,"mtime":1359672568000,"ctime":1386673706000},"spine/lib/spine.js":{"atime":1386777306000,"mtime":1381848277000,"ctime":1386673706000},"is-mobile/index.js":{"atime":1386777306000,"mtime":1379339940000,"ctime":1386671928000},"dependency-injection/lib/DI.js":{"atime":1386835785000,"mtime":1386834781000,"ctime":1386835739000},"dependency-injection/lib/Service.js":{"atime":1386835785000,"mtime":1386834781000,"ctime":1386835739000},"dependency-injection/lib/Helpers.js":{"atime":1386835785000,"mtime":1386834781000,"ctime":1386835739000},"/test/tests/Controller.coffee":{"atime":1386849793000,"mtime":1386843844000,"ctime":1386843844000},"/test/app/controllers/Application.coffee":{"atime":1386777306000,"mtime":1386664096000,"ctime":1386664096000},"/test/app/controllers/Events/One.coffee":{"atime":1386777306000,"mtime":1386664096000,"ctime":1386664096000},"/test/app/controllers/Events/Three.coffee":{"atime":1386777306000,"mtime":1386664096000,"ctime":1386664096000},"/test/app/controllers/Events/Two.coffee":{"atime":1386777306000,"mtime":1386664096000,"ctime":1386664096000},"/test/app/controllers/Fifth.coffee":{"atime":1386777306000,"mtime":1386664096000,"ctime":1386664096000},"/test/app/controllers/First.coffee":{"atime":1386777306000,"mtime":1386664096000,"ctime":1386664096000},"/test/app/controllers/Fourth.coffee":{"atime":1386777306000,"mtime":1386664096000,"ctime":1386664096000},"/test/app/controllers/Lazy.coffee":{"atime":1386777221000,"mtime":1386668497000,"ctime":1386668497000},"/test/app/controllers/Second.coffee":{"atime":1386777306000,"mtime":1386664096000,"ctime":1386664096000},"/test/app/controllers/Third.coffee":{"atime":1386777306000,"mtime":1386664096000,"ctime":1386664096000},"/lib/Controller.js":{"atime":1386849897000,"mtime":1386849887000,"ctime":1386849887000},"/package.json":{"atime":1386838709000,"mtime":1386838707000,"ctime":1386838707000},"spine/package.json":{"atime":1386777306000,"mtime":1386673706000,"ctime":1386673706000},"is-mobile/package.json":{"atime":1386777306000,"mtime":1386671928000,"ctime":1386671928000},"dependency-injection/package.json":{"atime":1386835785000,"mtime":1386835739000,"ctime":1386835739000}});
require.version = '5.5.1';

/** run section **/

/** /test/tests/Controller **/
require('/test/tests/Controller');