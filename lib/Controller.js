// Generated by CoffeeScript 1.6.3
(function() {
  var $, Controller, DI, Spine, hasAttr, isMobile, num,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Spine = require('spine');

  isMobile = require('is-mobile');

  DI = require('dependency-injection');

  $ = null;

  num = 0;

  hasAttr = function(el, name) {
    var attr;
    attr = $(el).attr(name);
    return typeof attr !== 'undefined' && attr !== false;
  };

  Controller = (function(_super) {
    __extends(Controller, _super);

    Controller.DATA_APPLICATION_SCOPE_NAME = 'data-application';

    Controller.DATA_CONTROLLER_NAME = 'data-controller';

    Controller.DATA_CONTROLLER_FULL_NAME = 'data-controller-path';

    Controller.DATA_LAZY_CONTROLLER_NAME = 'data-lazy';

    Controller.DATA_COMPUTER_NAME = 'data-computer';

    Controller.DATA_MOBILE_NAME = 'data-mobile';

    Controller.DATA_INSTANCE_NAME = '__spine_controller__';

    Controller.AUTO_ID_PREFIX = '_spine_controller';

    Controller.di = null;

    Controller.controllers = {
      __unknown__: []
    };

    Controller.prototype.id = null;

    Controller.prototype.fullName = null;

    function Controller(el) {
      if (el == null) {
        el = null;
      }
      if (!this.el && el instanceof $) {
        this.el = el;
      }
      Controller.__super__.constructor.call(this, this, []);
      if (this.el && hasAttr(this.el, Controller.DATA_CONTROLLER_FULL_NAME)) {
        this.fullName = this.el.attr(Controller.DATA_CONTROLLER_FULL_NAME);
      } else {
        Controller.controllers.__unknown__.push(this);
      }
      this.id = this.el.attr('id');
      this.el.data(Controller.DATA_INSTANCE_NAME, this);
    }

    Controller.init = function() {
      var args, defaultDi, defaultScope, di, jQuery, scope, _ref;
      jQuery = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      $ = jQuery;
      defaultScope = "[" + Controller.DATA_APPLICATION_SCOPE_NAME + "]:first";
      defaultDi = null;
      if (args[0] instanceof DI) {
        di = args[0];
        scope = defaultScope;
      } else if ((_ref = typeof args[0]) === 'string' || _ref === 'boolean') {
        di = typeof args[1] === 'undefined' ? defaultDi : args[1];
        scope = args[0];
      }
      if (di !== null && !(di instanceof DI)) {
        throw new Error('di container must be an instance of dependency-injection class.');
      }
      Controller.di = di;
      $.fn.getController = function() {
        var controller,
          _this = this;
        controller = $(this).data(Controller.DATA_INSTANCE_NAME);
        if (!controller || typeof controller === 'string' && hasAttr($(this), Controller.DATA_CONTROLLER_NAME) && hasAttr($(this), Controller.DATA_LAZY_CONTROLLER_NAME)) {
          return function() {
            return Controller.createController($(_this).attr(Controller.DATA_CONTROLLER_NAME), $(_this));
          };
        }
        return controller;
      };
      if (scope !== false) {
        return this.refresh(scope);
      }
    };

    Controller.prototype.getAllEvents = function() {
      var context, event, events, match, method, parent_prototype, result, selector;
      events = this.events ? this.events : {};
      context = this;
      while (parent_prototype = context.constructor.__super__) {
        if (parent_prototype.events) {
          events = $.extend({}, parent_prototype.events, events);
        }
        context = parent_prototype;
      }
      result = [];
      for (event in events) {
        method = events[event];
        match = event.match(this.eventSplitter);
        event = match[1];
        selector = match[2];
        result.push({
          event: event,
          selector: selector === '' ? null : selector,
          method: method
        });
      }
      return result;
    };

    Controller.prototype.unbindUiEvents = function() {
      var info, _i, _len, _ref, _results;
      _ref = this.getAllEvents();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        info = _ref[_i];
        if (info.selector === null) {
          _results.push(this.el.unbind(info.event));
        } else {
          _results.push(this.el.undelegate(info.selector, info.event));
        }
      }
      return _results;
    };

    Controller.findElementsWithController = function(scope, self) {
      var result,
        _this = this;
      if (scope == null) {
        scope = 'html';
      }
      if (self == null) {
        self = true;
      }
      scope = $(scope);
      result = [];
      if (self && hasAttr(scope, Controller.DATA_CONTROLLER_NAME)) {
        result.push(scope);
      }
      scope.find("*[" + Controller.DATA_CONTROLLER_NAME + "]:not([" + Controller.DATA_LAZY_CONTROLLER_NAME + "])").each(function(i, el) {
        el = $(el);
        return result.push(el);
      });
      return result;
    };

    Controller.refresh = function(scope, self) {
      var el, _i, _len, _ref, _results;
      if (scope == null) {
        scope = 'html';
      }
      if (self == null) {
        self = true;
      }
      _ref = Controller.findElementsWithController(scope, self);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        _results.push(Controller.createController(el.attr(Controller.DATA_CONTROLLER_NAME), el));
      }
      return _results;
    };

    Controller.unbind = function(scope, self) {
      var controller, el, _i, _len, _ref, _results;
      if (scope == null) {
        scope = 'html';
      }
      if (self == null) {
        self = true;
      }
      _ref = Controller.findElementsWithController(scope, self);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        controller = el.data(Controller.DATA_INSTANCE_NAME);
        controller.unbind();
        controller.stopListening();
        controller.unbindUiEvents();
        _results.push(el.data(Controller.DATA_INSTANCE_NAME, null));
      }
      return _results;
    };

    Controller.register = function(path, el) {
      if (el == null) {
        el = null;
      }
      return Controller.createController(path, el);
    };

    Controller.createController = function(name, el) {
      var c, computer, mobile;
      if (el == null) {
        el = null;
      }
      if (el !== null) {
        el = $(el);
      }
      computer = hasAttr(el, Controller.DATA_COMPUTER_NAME);
      mobile = hasAttr(el, Controller.DATA_MOBILE_NAME);
      if (el !== null && (computer || mobile)) {
        if (computer && isMobile()) {
          return false;
        }
        if (mobile && !isMobile()) {
          return false;
        }
      }
      if (el !== null && el.length > 0 && !hasAttr(el, 'id')) {
        el.attr('id', Controller.AUTO_ID_PREFIX + num);
        num++;
      }
      name = require.resolve(name);
      if (el !== null) {
        el.attr(Controller.DATA_CONTROLLER_FULL_NAME, name);
      }
      c = require(name);
      if (Controller.di === null) {
        c = new c(el);
      } else {
        c = Controller.di.createInstance(c, [el]);
      }
      if (typeof Controller.controllers[name] !== 'undefined') {
        Controller.controllers[name] = [Controller.controllers[name]];
        Controller.controllers[name].push(c);
      } else {
        Controller.controllers[name] = c;
      }
      return c;
    };

    Controller.find = function(controller) {
      return $("[" + Controller.DATA_CONTROLLER_NAME + "=\"" + controller + "\"]").getController();
    };

    return Controller;

  })(Spine.Controller);

  module.exports = Controller;

}).call(this);
