// Generated by CoffeeScript 1.6.3
(function() {
  var Controller, Spine, isMobile,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Spine = require('spine');

  isMobile = require('is-mobile');

  Controller = (function(_super) {
    __extends(Controller, _super);

    Controller.jQuery = null;

    function Controller(el) {
      if (el == null) {
        el = null;
      }
      if (!this.el && el instanceof Controller.jQuery) {
        this.el = el;
      }
      Controller.__super__.constructor.call(this, this, []);
      this.el.data('controller', this);
    }

    Controller.init = function(jQuery, scope) {
      if (scope == null) {
        scope = '[data-application]:first';
      }
      Controller.jQuery = jQuery;
      Controller.jQuery.fn.hasAttr = function(name) {
        var attr;
        attr = $(this).attr(name);
        return typeof attr !== 'undefined' && attr !== false;
      };
      Controller.jQuery.fn.getController = function() {
        return Controller.jQuery(this).data('controller');
      };
      if (scope !== false) {
        return Controller.refresh(scope);
      }
    };

    Controller.prototype.getAllEvents = function() {
      var context, event, events, match, method, parent_prototype, result, selector;
      events = this.events ? this.events : {};
      context = this;
      while (parent_prototype = context.constructor.__super__) {
        if (parent_prototype.events) {
          events = Controller.jQuery.extend({}, parent_prototype.events, events);
        }
        context = parent_prototype;
      }
      result = [];
      for (event in events) {
        method = events[event];
        match = event.match(this.eventSplitter);
        event = match[1];
        selector = match[2];
        result.push({
          event: event,
          selector: selector === '' ? null : selector,
          method: method
        });
      }
      return result;
    };

    Controller.prototype.unbindUiEvents = function() {
      var info, _i, _len, _ref, _results;
      _ref = this.getAllEvents();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        info = _ref[_i];
        if (info.selector === null) {
          _results.push(this.el.unbind(info.event));
        } else {
          _results.push(this.el.undelegate(info.selector, info.event));
        }
      }
      return _results;
    };

    Controller.findElementsWithController = function(scope) {
      var result;
      if (scope == null) {
        scope = 'html';
      }
      scope = Controller.jQuery(scope);
      result = [];
      if (scope.hasAttr('data-controller')) {
        result.push(scope);
      }
      scope.find('*[data-controller]').each(function(i, el) {
        el = Controller.jQuery(el);
        return result.push(el);
      });
      return result;
    };

    Controller.refresh = function(scope) {
      var el, _i, _len, _ref, _results;
      if (scope == null) {
        scope = 'html';
      }
      _ref = Controller.findElementsWithController(scope);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        _results.push(Controller.register(el.attr('data-controller'), el));
      }
      return _results;
    };

    Controller.unbind = function(scope) {
      var controller, el, _i, _len, _ref, _results;
      if (scope == null) {
        scope = 'html';
      }
      _ref = Controller.findElementsWithController(scope);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        controller = el.data('_controller');
        controller.unbind();
        controller.stopListening();
        controller.unbindUiEvents();
        _results.push(el.data('_controller', null));
      }
      return _results;
    };

    Controller.register = function(path, el) {
      var computer, mobile;
      if (el == null) {
        el = null;
      }
      if (el !== null) {
        el = Controller.jQuery(el);
      }
      computer = el.hasAttr('data-computer');
      mobile = el.hasAttr('data-mobile');
      if (el !== null && (computer || mobile)) {
        if (computer && isMobile()) {
          return false;
        }
        if (mobile && !isMobile()) {
          return false;
        }
      }
      return Controller.createController(path, el);
    };

    Controller.createController = function(name, el) {
      return new (require(name))(el);
    };

    return Controller;

  })(Spine.Controller);

  module.exports = Controller;

}).call(this);
